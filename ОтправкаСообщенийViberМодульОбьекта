

//JSON

Функция ПрочитатьСтроку(Строка, СхемаПодстановок)
	ЗаменаМаски = "\" + Символ(65535);
	
	Результат = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка, 
						"\\",			ЗаменаМаски),	// Перемаскирование последовательности.
						"\/",			"/"),           // x2f
						"\b",			Символ(008)),	// x08
						"\t",			Символы.Таб),   // x09
						"\n",			Символы.ПС),    // x0a
						"\f",			Символы.ПФ),    // x0c
						"\r",			Символы.ВК),    // x0d
						"\""",			"""");          // x22
		
	// Unicode
	Позиция = Найти(Результат, "\u");
	Пока Булево(Позиция) Цикл
		СтаршийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 2, 2))];
		МладшийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 4, 2))];
		
		Результат = СтрЗаменить(Результат, Сред(Результат, Позиция, 6), Символ(256 * СтаршийБайт + МладшийБайт));
		
		Позиция = Найти(Результат, "\u");
	КонецЦикла;
	
	Результат = СтрЗаменить(Результат, "\'", "'");
	
	Возврат СтрЗаменить(Результат, ЗаменаМаски, "\");
КонецФункции

Функция ОпределитьДату(Значение)
	Если (СтрДлина(Значение) = 20) Тогда
		Если (Сред(Значение, 05, 1) = "-") И				// -
			 (Сред(Значение, 08, 1) = "-") И				// -
			 (Сред(Значение, 11, 1) = "T") И				// T
			 (Сред(Значение, 14, 1) = ":") И				// :
			 (Сред(Значение, 17, 1) = ":") И				// :
			 (Сред(Значение, 20, 1) = "Z") Тогда			// Z
			// Год. 
			Если Булево(Найти("0123456789", Сред(Значение, 01, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 02, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 03, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 04, 1))) И
			// Месяц.
				 Булево(Найти("0123456789", Сред(Значение, 06, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 07, 1))) И
			// День.
				 Булево(Найти("0123456789", Сред(Значение, 09, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 10, 1))) И
			// Час.
				 Булево(Найти("0123456789", Сред(Значение, 12, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 13, 1))) И
			// Минута.
				 Булево(Найти("0123456789", Сред(Значение, 15, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 16, 1))) И
			// Секунда.
				 Булево(Найти("0123456789", Сред(Значение, 18, 1))) И
				 Булево(Найти("0123456789", Сред(Значение, 19, 1))) Тогда
				Возврат Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ПрочитатьДату(Значение) Экспорт
	Попытка
		Возврат Дата(Лев(Значение, 4) + Сред(Значение, 06, 2) + Сред(Значение, 09, 2) + Сред(Значение, 12, 2) + Сред(Значение, 15, 2) + Сред(Значение, 18, 2));
	Исключение 		
	КонецПопытки;
КонецФункции


Функция JSONПрочитать(JSON, Индекс, Длина, СхемаПодстановок)
	Символ = Сред(JSON, Индекс, 1);
	
	Если Символ = "[" Тогда
		Результат = Новый Массив;
		
		Индекс = Индекс + 1;
		
		Символ = Сред(JSON, Индекс, 1);  // Если следующий символ ] - массив пустой
		Если Символ = "]" Тогда
			Индекс = Индекс + 1;
		Иначе
			Пока Индекс <= Длина Цикл
				Результат.Добавить(JSONПрочитать(JSON, Индекс, Длина, СхемаПодстановок));
				
				Символ = Сред(JSON, Индекс, 1);
				Если Символ = "]" Тогда
					Индекс = Индекс + 1;
					Прервать;
				Иначе
					Если Символ = "," Тогда   // Если будет запятая - продолжение массива
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Символ = "{" Тогда   // Объект
		Индекс = Индекс + 1;
		Символ = Сред(JSON, Индекс, 1);
		
		Результат = Новый Соответствие;
		
		Если Символ = "}" Тогда    // Если следует символ } - объект пустой
			Индекс = Индекс + 1;
		Иначе
			Пока Индекс <= Длина Цикл
				Ключ = JSONПрочитать(JSON, Индекс, Длина, СхемаПодстановок);
				
				Символ = Сред(JSON, Индекс, 1);
				Если Символ = ":" Тогда
					Индекс = Индекс + 1;
				КонецЕсли;
				
				Значение = JSONПрочитать(JSON, Индекс, Длина, СхемаПодстановок);
				
				Результат.Вставить(Ключ, Значение);
				
				Символ = Сред(JSON, Индекс, 1);
				
				Если Символ = "}" Тогда // Конец объекта
					Индекс = Индекс + 1;
					Прервать;
				Иначе
					Если Символ = "," Тогда
						Индекс = Индекс + 1
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если Символ = """" Или Символ = "'" Тогда
			Начало = Индекс;
			Подстрока = Сред(JSON, Индекс + 1);
			
			Пока Истина Цикл
				Позиция = Найти(Подстрока, Символ);
				
				Если Позиция > 0 Тогда
					Индекс = Индекс + Позиция;
					Откат = Позиция - 1;
					
					Экранирование = Ложь;
					Пока Сред(Подстрока, Откат, 1) = "\" И Булево(Откат) Цикл
						Экранирование = Не Экранирование;
						Откат = Откат - 1;
					КонецЦикла;
					
					Если Экранирование Тогда
						Подстрока = Сред(Подстрока, Позиция + 1);
					Иначе
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Результат = ПрочитатьСтроку(Сред(JSON, Начало + 1, Индекс - Начало - 1), СхемаПодстановок);
						
			Если ОпределитьДату(Результат) Тогда
				Результат = ПрочитатьДату(Результат);
			КонецЕсли;
						
			Индекс = Индекс + 1;
		Иначе
			Если Символ = "n" Тогда   // null
				Если Сред(JSON, Индекс, 4) = "null" Тогда
					Индекс = Индекс + 4;
					Результат = Null;
				КонецЕсли;
			ИначеЕсли Символ = "t" Тогда  // true
				Если Сред(JSON, Индекс, 4) = "true" Тогда
					Индекс = Индекс + 4;
					Результат = Истина;
				КонецЕсли; 			
			ИначеЕсли Символ = "f" Тогда // false
				Если Сред(JSON, Индекс, 5) = "false" Тогда
					Индекс = Индекс + 5;
					Результат = Ложь;
				КонецЕсли; 			
			ИначеЕсли Символ = "u" Тогда // undefined
				Если Сред(JSON, Индекс, 9) = "undefined" Тогда
					Индекс = Индекс + 9;
					Результат = Неопределено;
				КонецЕсли;
			Иначе   // Число				
				Начало = Индекс;
				Пока Булево(Найти("-+.0123456789", Символ)) Цикл
					Индекс = Индекс + 1;
					Символ = Сред(JSON, Индекс, 1);
				КонецЦикла;
				
				Попытка
					Результат = Число(Сред(JSON, Начало, Индекс - Начало));
				Исключение
					Результат = 0;
				КонецПопытки; 				
				
				Если Символ = "E" ИЛИ Символ = "e" Тогда  // экспоненциальная часть
					Индекс = Индекс + 1;
					Начало = Индекс;
					Символ = Сред(JSON, Индекс, 1);
					Пока Булево(Найти("-+0123456789", Символ)) Цикл
						Индекс = Индекс + 1;
						Символ = Сред(JSON, Индекс, 1);
					КонецЦикла;
					
					Степень = Число(Сред(JSON, Начало, Индекс - Начало));
					Результат = Результат * Pow(10, Степень);
				КонецЕсли; 				
			КонецЕсли;   			
		КонецЕсли;  	
	КонецЕсли;
	
	Возврат Результат;   	
КонецФункции

Функция JSONЧтениеИнициализация(JSON)
	Индекс = 1;
	Длина = СтрДлина(JSON);
	
	Если Длина = 0 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	ПервыйСимвол = Сред(JSON, Индекс, 1);
	
	Если ПервыйСимвол <> "[" И ПервыйСимвол <> "{" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СхемаПодстановок = Новый Соответствие;
	ШестнадцатиричнаяСистема = "0123456789abcdef";
	ДесятичноеЧисло = 0;

	Для ВторойРазряд = 1 По 16 Цикл
		Для ПервыйРазряд = 1 По 16 Цикл
			СхемаПодстановок.Вставить(Сред(ШестнадцатиричнаяСистема, ВторойРазряд, 1) + Сред(ШестнадцатиричнаяСистема, ПервыйРазряд, 1), ДесятичноеЧисло);
			ДесятичноеЧисло = ДесятичноеЧисло + 1;
		КонецЦикла;
	КонецЦикла;
	
	Результат = JSONПрочитать(JSON, Индекс, Длина, СхемаПодстановок);
	
	Возврат Результат;
КонецФункции

Функция JSONЧтение(JSON) Экспорт
	Возврат JSONЧтениеИнициализация(JSON);
КонецФункции


Функция ПолучитьJSONИзСтруктурыПараметров(СтруктураПараметров = Неопределено)
	СтруктураJSON = Новый Структура;
	
	Если СтруктураПараметров <> Неопределено Тогда
		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
			СтруктураJSON.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);
	
	Возврат ЗаписьJSON.Закрыть(); 	
КонецФункции



Функция СформироватьФайлДляДобавленияWebhook()
	Массивevent_types = Новый Массив;
	//Массивevent_types.Добавить("delivered");
	//Массивevent_types.Добавить("seen");
	//Массивevent_types.Добавить("failed");
	Массивevent_types.Добавить("subscribed");
	Массивevent_types.Добавить("unsubscribed");
	//Массивevent_types.Добавить("conversation_started");

	//Структураevent_types = Новый Структура;
	//Структураevent_types.Вставить("event_types", Массивevent_types);
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("url",         webhook);  
	СтруктураЗаписи.Вставить("event_types", Массивevent_types);
	//СтруктураЗаписи.Вставить("send_name",   "false");
	//СтруктураЗаписи.Вставить("send_photo",  "false");
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
		
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗаписи);
	
	СтрJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрJSON;
КонецФункции


Функция ОбработатьОтветСервераОтправкаСообщения(ТекстОтвета)
	ЧислоСтрокОтвета = СтрЧислоСтрок(ТекстОтвета);
	
	Если НЕ Лев(ТекстОтвета, 1) = "{" Тогда
		Возврат ТекстОтвета;
	КонецЕсли;
	
	JSONОбъект = JSONЧтение(ТекстОтвета);
	Если НЕ ТипЗнч(JSONОбъект) = Тип("Соответствие") Тогда
		Возврат ТекстОтвета;
	КонецЕсли;                                                       
	
	status         = JSONОбъект.Получить("status");
	status_message = JSONОбъект.Получить("status_message");
	chat_hostname  = JSONОбъект.Получить("chat_hostname");
	event_types    = JSONОбъект.Получить("event_types");
				
	Возврат ТекстОтвета; 	
КонецФункции

//*JSON

Функция ОтправитьЗапросНаСервер(ТекстЗапроса, ТекстФайла, ОтветСервера = Неопределено)
	HTTP = Новый HTTPСоединение(Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows())); 	
	
	ЗаголовкиЗапроса = Новый Соответствие;  
	ЗаголовкиЗапроса.Вставить("X-Viber-Auth-Token", Token);
	ЗаголовкиЗапроса.Вставить("Content-Type",       "application/json");
	
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса, ЗаголовкиЗапроса);
	
	Если ПустаяСтрока(ТекстФайла) Тогда
		HTTPОтвет = HTTP.Получить(HTTPЗапрос);
	Иначе	
		HTTPЗапрос.УстановитьТелоИзСтроки(ТекстФайла, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
			
		Попытка
			HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос); 
		Исключение
			ТекстСообщения = "Неудачная попытка отправки: " + Символы.ПС + ОписаниеОшибки();		
			Возврат ТекстСообщения;
		КонецПопытки; 
	КонецЕсли;	
	
	Если НЕ HTTPОтвет.КодСостояния = 200 Тогда
		ТекстСообщения = "Неудачная попытка соединения с сервером отправки.";
		Возврат ТекстСообщения;
	КонецЕсли;
	
	ОтветСервера = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8); 				
	Если НЕ HTTPОтвет.КодСостояния = 200 Тогда
		Сообщить("Неудачная попытка соединения с сервером отправки.");
		Возврат Ложь;
	КонецЕсли;
	
	ОтветСервераСтр = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);  
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ОтветСервераСтр);
	
	ОтветСервера = ПрочитатьJSON(Чтение);
	
	Возврат Истина;    
КонецФункции 

Процедура ПолучитьПараметрыОтправки() Экспорт
	Организация = Справочники.Организации.НайтиПоНаименованию("ТОВНашафірма");
    Если Организация = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    //token   = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилищаМутабельных(Организация, "Viber_token");
    //webhook = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилищаМутабельных(Организация, "Viber_webhook");
КонецПроцедуры


Процедура ПолучитьПараметрыОтправкиФайла() Экспорт
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ЗначениеНастроекПовтИсп.ЗначениеНастройки("ОсновнаяОрганизация");
	КонецЕсли;
	
	token   = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Организация, "Viber_token");
	webhook = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Организация, "Viber_webhook");
КонецПроцедуры




Процедура ЗаполнитьПолучателейИзМассиваКонтрагентов(МассивКонтрагентов) Экспорт 
	СписокПолучателей.Очистить();
	
	Запрос = Новый Запрос;                
	Запрос.УстановитьПараметр("Контрагенты", МассивКонтрагентов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПодписчикиViber.ID КАК id,
	               |	ИСТИНА КАК Отправлять,
	               |	"""" КАК СообщениеОбОтправке,
	               |	ПодписчикиViber.Контрагент КАК Контрагент
	               |ИЗ
	               |	РегистрСведений.ПодписчикиМесенджеров КАК ПодписчикиViber
	               |ГДЕ
	               |	ПодписчикиViber.Мессенджер = ЗНАЧЕНИЕ(Перечисление.Мессенджеры.Viber)
	               |	И ПодписчикиViber.Контрагент В(&Контрагенты)";
	
	ДанныеЗапроса = Запрос.Выполнить().Выбрать();	
	Пока ДанныеЗапроса.Следующий() Цикл	   
		НоваяСтрока = СписокПолучателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗапроса);
	КонецЦикла;
КонецПроцедуры



Функция SettingАWebhook() Экспорт
	Перем ОтветСервера;
	
    ТекстФайла   = СформироватьФайлДляДобавленияWebhook();
	ТекстЗапроса = "/pa/set_webhook";
	
	Если НЕ ОтправитьЗапросНаСервер(ТекстЗапроса, ТекстФайла, ОтветСервера) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ОтветСервера.status = 1 Тогда
		Сообщить("При установке webhook произошла ошибка " +  ОтветСервера);
	ИначеЕсли ОтветСервера.status = 0 Тогда 
		Сообщить("Вебхук успешно установлен");	
	КонецЕсли; 
			
	Возврат Истина; 
КонецФункции

Функция ОтправитьСообщенияПолучателям(КоличествоОшибок = 0) Экспорт
	Перем ОтветСервера;
	
	Если ПустаяСтрока(token) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(webhook) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	sender = Новый Соответствие();
	sender.Вставить("name", "Адміністратор");
	
	// Здесь должен быть код создания массива кнопок и добавления его в структуру отправки
	МассивКнопок = Новый Массив;
	Кнопка = Новый Структура("ActionType, ActionBody, Text", "reply", "Команда1", "Кнопка 1");
	МассивКнопок.Добавить(Кнопка);
	
	Клавиатура = Новый Структура("Type, Buttons", "keyboard", МассивКнопок);
	
	КоличествоОшибок = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из СписокПолучателей Цикл
		СтрокаТабличнойЧасти.СообщениеОбОтправке = "";
		
		ТекreceiverID = СтрокаТабличнойЧасти.id;        
		Если Не ЗначениеЗаполнено(ТекreceiverID) Тогда
			СтрокаТабличнойЧасти.СообщениеОбОтправке = "Не заполнен id";
			Продолжить;
		КонецЕсли;
		СтруктураОтправки = Новый Структура("sender,receiver,type,text,keyboard", sender, ТекreceiverID, "text", ТекстСообщения, Клавиатура);
		
		ТекстФайла = ПолучитьJSONИзСтруктурыПараметров(СтруктураОтправки);
		ТекстЗапроса = "/pa/send_message";
		
		Если НЕ ОтправитьЗапросНаСервер(ТекстЗапроса, ТекстФайла, ОтветСервера) Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
			Продолжить;
		КонецЕсли; 
		
		// Обработка ответа сервера и запись результата
		
		Если КоличествоОшибок > 7 Тогда
			Возврат Ложь;
		КонецЕсли;    
	КонецЦикла;    
	
	Возврат Истина;
КонецФункции

//Функция ОтправитьСообщенияПолучателям(КоличествоОшибок = 0) Экспорт
//	Перем ОтветСервера;
//	
//	Если ПустаяСтрока(token) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если ПустаяСтрока(webhook) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если ПустаяСтрока(ТекстСообщения) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	sender = Новый Соответствие();
//	sender.Вставить("name", "Адміністратор");
//	
//	для Каждого СтрокаТабличнойЧасти Из Админы Цикл
//		sender.Вставить("name", СтрокаТабличнойЧасти.Представление);
//	КонецЦикла;	
//	
//	КоличествоОшибок = 0;
//	
//	Для Каждого СтрокаТабличнойЧасти Из СписокПолучателей Цикл
//		СтрокаТабличнойЧасти.СообщениеОбОтправке = "";
//		
//		ТекreceiverID = СтрокаТабличнойЧасти.id;       		
//		Если Не ЗначениеЗаполнено(ТекreceiverID) Тогда
//			СтрокаТабличнойЧасти.СообщениеОбОтправке = "Не заполнен id";
//			Продолжить;
//		КонецЕсли;
//		
//		
//		
//		СтруктураОтправки = Новый Структура("sender,receiver,type,text", sender, ТекreceiverID, "text", ТекстСообщения);
//		
//		ТекстФайла   = ПолучитьJSONИзСтруктурыПараметров(СтруктураОтправки);
//		ТекстЗапроса = "/pa/send_message";
//		
//		Если НЕ ОтправитьЗапросНаСервер(ТекстЗапроса, ТекстФайла, ОтветСервера) Тогда
//			КоличествоОшибок = КоличествоОшибок + 1;
//			Продолжить;
//		КонецЕсли;	
//		
//		Если ОтветСервера.status = 999 Тогда
//			СтрокаТабличнойЧасти.СообщениеОбОтправке = "При установке webhook произошла ошибка " +  ОтветСервера.status_message;
//			КоличествоОшибок = КоличествоОшибок + 1;
//		ИначеЕсли ОтветСервера.status = 0 Тогда 
//			//СтрокаТабличнойЧасти.СообщениеОбОтправке = "Сообщение отправлено";	
//			МенеджерЗаписи = РегистрыСведений.ERP_STO_ПерепискиВайбер.СоздатьМенеджерЗаписи();
//			МенеджерЗаписи.Период = ТекущаяДата();
//			МенеджерЗаписи.text = ТекстСообщения;
//			МенеджерЗаписи.id = СтрокаТабличнойЧасти.id;
//			МенеджерЗаписи.КлиентВБазе = СтрокаТабличнойЧасти.Контрагент;
//			МенеджерЗаписи.Исходящее = Истина;
//			
//			МенеджерЗаписи.Записать();
//		КонецЕсли;
//		
//		Если КоличествоОшибок > 7 Тогда
//			Возврат Ложь;
//		КонецЕсли;	
//	КонецЦикла;	
//			
//	Возврат Истина; 
//КонецФункции

Функция ОтправитьФайлПолучателям(КоличествоОшибок = 0) Экспорт  
	Перем ОтветСервера;
	
	Если ПустаяСтрока(token) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(webhook) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	sender = Новый Соответствие();
	sender.Вставить("name", "Адміністратор");
	
	для Каждого СтрокаТабличнойЧасти Из Админы Цикл
		sender.Вставить("name", СтрокаТабличнойЧасти.Представление);
	КонецЦикла;	
	
	КоличествоОшибок = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из СписокПолучателей Цикл
		СтрокаТабличнойЧасти.СообщениеОбОтправке = "";
		
		ТекreceiverID = СтрокаТабличнойЧасти.id;       		
		Если Не ЗначениеЗаполнено(ТекreceiverID) Тогда
			СтрокаТабличнойЧасти.СообщениеОбОтправке = "Не заполнен id";
			Продолжить;
		КонецЕсли;	
		
		СтруктураОтправки = Новый Структура("sender,receiver,type,text,media", sender, ТекreceiverID, "picture", "Photo description", "http://148.251.22.218/noname.jpg");
		
		ТекстФайла   = ПолучитьJSONИзСтруктурыПараметров(СтруктураОтправки);
		ТекстЗапроса = "/pa/send_message";
		
		Если НЕ ОтправитьЗапросНаСервер(ТекстЗапроса, ТекстФайла, ОтветСервера) Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
			Продолжить;
		КонецЕсли;	
		
		Если ОтветСервера.status = 999 Тогда
			СтрокаТабличнойЧасти.СообщениеОбОтправке = "При установке webhook произошла ошибка " +  ОтветСервера.status_message;
			КоличествоОшибок = КоличествоОшибок + 1;
		ИначеЕсли ОтветСервера.status = 0 Тогда 
			//СтрокаТабличнойЧасти.СообщениеОбОтправке = "Сообщение отправлено";	
			МенеджерЗаписи = РегистрыСведений.ERP_STO_ПерепискиВайбер.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ТекущаяДата();
			МенеджерЗаписи.text = ТекстСообщения;
			МенеджерЗаписи.id = СтрокаТабличнойЧасти.id;
			МенеджерЗаписи.КлиентВБазе = СтрокаТабличнойЧасти.Контрагент;
			МенеджерЗаписи.Исходящее = Истина;
			
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		Если КоличествоОшибок > 7 Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;	
			
	Возврат Истина; 
КонецФункции
Функция ОтправитьФайлПолучателямИзЗаписи(КоличествоОшибок = 0,НовоеИмяФАйла,КомуОтправить) Экспорт 
	Перем ОтветСервера;
	
	Если ПустаяСтрока(token) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(webhook) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	sender = Новый Соответствие();
	sender.Вставить("name", "Адміністратор");
	
	для Каждого СтрокаТабличнойЧасти Из Админы Цикл
		sender.Вставить("name", СтрокаТабличнойЧасти.Представление);
	КонецЦикла;	
	
	КоличествоОшибок = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПодписчикиМесенджеров.Мессенджер КАК Мессенджер,
	               |	ПодписчикиМесенджеров.ID КАК ID,
	               |	ПодписчикиМесенджеров.Контрагент.Код КАК КонтрагентКод
	               |ИЗ
	               |	РегистрСведений.ПодписчикиМесенджеров КАК ПодписчикиМесенджеров
	               |ГДЕ
	               |	ПодписчикиМесенджеров.Контрагент.Код = &Контрагент";
	//КомуОтправить.СообщениеОбОтправке = "";
	Запрос.УстановитьПараметр("Контрагент",КомуОтправить.Код);
	Результат=Запрос.Выполнить();	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("ID"));
	
	Для Каждого Значение из Список Цикл
	ТекreceiverID = Список[0].Значение; 
	КонецЦикла;
	Если Не ЗначениеЗаполнено(ТекreceiverID) Тогда
		СтрокаТабличнойЧасти.СообщениеОбОтправке = "Не заполнен id";
	КонецЕсли;	
	
	ИмяФайлаГлобальная = СтрЗаменить(НовоеИмяФАйла,"C:\server\data\htdocs\","http://auto.powerdisplay.com.ua/");
	
	
	СтруктураОтправки = Новый Структура("sender,receiver,type,media,size,file_name,", sender, ТекreceiverID, "file", ИмяФайлаГлобальная,"90112",СтрЗаменить(ИмяФайлаГлобальная,"http://auto.powerdisplay.com.ua/",""));
	
	ТекстФайла   = ПолучитьJSONИзСтруктурыПараметров(СтруктураОтправки);
	ТекстЗапроса = "/pa/send_message";
	
	Если НЕ ОтправитьЗапросНаСервер(ТекстЗапроса, ТекстФайла, ОтветСервера) Тогда
		КоличествоОшибок = КоличествоОшибок + 1;
	КонецЕсли;	
		
	Если ОтветСервера.status = 999 Тогда
		СтрокаТабличнойЧасти.СообщениеОбОтправке = "При установке webhook произошла ошибка " +  ОтветСервера.status_message;
		КоличествоОшибок = КоличествоОшибок + 1;
	ИначеЕсли ОтветСервера.status = 0 Тогда 
		////СтрокаТабличнойЧасти.СообщениеОбОтправке = "Сообщение отправлено";	
		//МенеджерЗаписи = РегистрыСведений.ERP_STO_ПерепискиВайбер.СоздатьМенеджерЗаписи();
		//МенеджерЗаписи.Период = ТекущаяДата();
		//МенеджерЗаписи.text = ТекстСообщения;
		//МенеджерЗаписи.id = СтрокаТабличнойЧасти.id;
		//МенеджерЗаписи.КлиентВБазе = СтрокаТабличнойЧасти.Контрагент;
		//МенеджерЗаписи.Исходящее = Истина;
		//
		//МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если КоличествоОшибок > 7 Тогда
		Возврат Ложь;
	КонецЕсли;	
	//КонецЦикла;	
	
	Возврат Истина; 
КонецФункции


Процедура ЗаполнитьСписокАдминистраторов() Экспорт
	Перем ОтветСервера;
	
	Если НЕ ОтправитьЗапросНаСервер("/pa/get_account_info", "", ОтветСервера) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтветСервера.Свойство("members") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПодписчиков = ОтветСервера.members;
	Для Каждого Подписчик Из МассивПодписчиков Цикл
		Если Подписчик.role = "admin" Тогда
			Админы.Добавить(Подписчик.id, Подписчик.name, Истина);
		Иначе 
			НоваяСтрока = СписокПолучателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Подписчик);
		КонецЕсли; 
	КонецЦикла; 	  
КонецПроцедуры

Функция ОтправитьСообщениеКонтрагенту(МассивКонтрагентов, СообщенияОбОшибках = "") Экспорт
	Если ПустаяСтрока(ТекстСообщения) Тогда
		СообщенияОбОшибках = "Не заполнен текст отправки!";
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьПолучателейИзМассиваКонтрагентов(МассивКонтрагентов);
	Если СписокПолучателей.Количество() = 0 Тогда
	    СообщенияОбОшибках = "Не найдены ID контрагентов-получателей!";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ЗначениеНастроекПовтИсп.ЗначениеНастройки("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		СообщенияОбОшибках = "Не определена организация-отправитель!";
		Возврат Ложь;
	КонецЕсли;	
	
	ПолучитьПараметрыОтправки();
	
	Если Не ЗначениеЗаполнено(token) или Не ЗначениеЗаполнено(webhook) Тогда
		СообщенияОбОшибках = "Не установлены параметры организации-отправителя!";
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьСписокАдминистраторов();	
	ОтправитьСообщенияПолучателям();
КонецФункции


Сервер = "chatapi.viber.com";
