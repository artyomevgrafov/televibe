Функция ЗащищенноеСоединение() Экспорт
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Возврат ЗащищенноеСоединение;
	
КонецФункции

Функция ИнтернетПрокси() Экспорт
	
	ИнтернетПрокси = Новый ИнтернетПрокси;
	Возврат ИнтернетПрокси;
	
КонецФункции

Функция Таймаут() Экспорт
	
	Возврат 20;
	
КонецФункции

Функция СоздатьЗапрос(ТипСодержимого = Неопределено) Экспорт
	
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки.Вставить("Connection", "keep-alive");
	Если ЗначениеЗаполнено(ТипСодержимого) Тогда
		Запрос.Заголовки.Вставить("Content-type", ТипСодержимого);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция СоздатьСоединение() Экспорт
	
	Соединение = Новый HTTPСоединение("api.telegram.org",             
		,
		,
		,
		ИнтернетПрокси(),
		Таймаут(),
		ЗащищенноеСоединение(),
		);
	Возврат Соединение;	
	
КонецФункции

Функция СобратьАдресРесурса(НакопленныеДанные)
	
	Жетон 				= НакопленныеДанные.ДанныеБота.Жетон;
	Метод 				= НакопленныеДанные.Метод;
	СтруктураПараметров = НакопленныеДанные.СтруктураПараметров;
	
	// Сборка параметров метода строкой
	ПараметрыМетодаСтрокой = "";
	Если НакопленныеДанные.СпособЗапроса = Перечисления.ТелеграмСпособыЗапросов.Простой Тогда
		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
			Если ПараметрыМетодаСтрокой <> "" Тогда
				ПараметрыМетодаСтрокой = ПараметрыМетодаСтрокой + "&";
			КонецЕсли;                                                                   
			ЗначениеСтрокой = ТелеграмСервер.ЗначениеСтрокой(КлючИЗначение.Значение);
			ПараметрыМетодаСтрокой = ПараметрыМетодаСтрокой + КлючИЗначение.Ключ + "=" + ЗначениеСтрокой;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыМетодаСтрокой <> "" Тогда
		ПараметрыМетодаСтрокой = "?" + ПараметрыМетодаСтрокой;
	КонецЕсли;
	
	АдресРесурса = СтрШаблон("/bot%1/%2%3", Жетон, Метод, ПараметрыМетодаСтрокой);
	
	Возврат АдресРесурса;
	
КонецФункции

Функция РазделитьСсылкиИПодписи(Текст,НакопленныеДанные)

    МаксимальнаяДлинаКнопки = 20; // Задайте максимальную длину кнопки здесь
    МассивКнопок = Новый Массив();
    Позиция = 1;
	МестоположениеОтправлено = Ложь;

    Пока Позиция < СтрДлина(Текст) Цикл  
        НачалоСсылки = Найти(Сред(Текст, Позиция), "https://");

        Если НачалоСсылки = 0 Тогда
            Прервать;
        КонецЕсли;

        НачалоСсылки = НачалоСсылки + Позиция - 1;

        КонецСсылки = Найти(Сред(Текст, НачалоСсылки), " "); // Ищем первый пробел как конец ссылки
        
        Если КонецСсылки = 0 Тогда
            КонецСсылки = СтрДлина(Текст) - НачалоСсылки + 1;
        КонецЕсли;

        Ссылка = Сред(Текст, НачалоСсылки, КонецСсылки - 1);		
		РабочаяСсылка = Ссылка;  // Создаем дубликат ссылки для дальнейшей обработки
		// Если URL включает "goo.gl", обрабатываем ссылку как местоположение
		Если СтрНайти(РабочаяСсылка, "goo.gl") > 0 Тогда
			
			// Расширяем сокращенную ссылку
			РасширеннаяСсылка = ПолучитьРасширеннуюСсылку(РабочаяСсылка);
			
			// Извлекаем координаты из расширенной ссылки
			Координаты = ИзвлечьКоординаты(РасширеннаяСсылка);
			
			// Если координаты успешно извлечены, отправляем местоположение
			Если Координаты <> Неопределено Тогда
				//Метод = "sendLocation";
				//ПараметрыМетода = Новый Структура("latitude, longitude", Координаты.Широта, Координаты.Долгота);
				//ВыполнитьМетод(Метод, ПараметрыМетода);
				
				СтруктураОтправки = Новый Структура;
				СтруктураОтправки.Вставить("chat_id", НакопленныеДанные.СтруктураПараметров.chat_id);
				СтруктураОтправки.Вставить("latitude", Координаты.Долгота);
				СтруктураОтправки.Вставить("longitude", Координаты.Широта);
				
				ТелеграмAPI.ВыполнитьМетод(НакопленныеДанные.ДанныеБота, "sendLocation", СтруктураОтправки);
				МестоположениеОтправлено = Истина;	
			КонецЕсли;
			
		КонецЕсли;
		
        Подстрока = Сред(Текст, Позиция, НачалоСсылки - Позиция);
        НачалоПодписи = 1;
        КонецПодписи = СтрДлина(Подстрока);

        // Поиск последнего вхождения ". "
        Для i = 1 По СтрДлина(Подстрока) Цикл
            Если Сред(Подстрока, i, 2) = ". " Тогда
                НачалоПодписи = i + 2;
            КонецЕсли;
        КонецЦикла;

        Подпись = Сред(Подстрока, НачалоПодписи, КонецПодписи - НачалоПодписи + 1);
        Позиция = НачалоСсылки + КонецСсылки; // Обновляем позицию

        // Обрезаем подпись до заданной длины
        Если СтрДлина(Подпись) > МаксимальнаяДлинаКнопки Тогда
            Подпись = Лев(Подпись, МаксимальнаяДлинаКнопки);
        КонецЕсли;
		
		// Добавляем ссылку только в том случае, если она не была обработана как местоположение
		//Если Не МестоположениеОтправлено Или СтрНайти(Ссылка, "goo.gl") = 0 Тогда 
			Кнопка = Новый Структура;
        	Кнопка.Вставить("text", ОбрезатьСтроку(Подпись));
        	Кнопка.Вставить("url", ОбрезатьСтроку(Ссылка));
        //КонецЕсли;
        
		//Кнопка.Вставить("url", РасширеннаяСсылка); 
		
        СтрокаКнопок = Новый Массив;
        СтрокаКнопок.Добавить(Кнопка);
        МассивКнопок.Добавить(СтрокаКнопок);

    КонецЦикла;

    Результат = Новый Структура;
    Результат.Вставить("inline_keyboard", МассивКнопок);

    Возврат Результат;

КонецФункции  

Функция ПолучитьРасширеннуюСсылку(СокращеннаяСсылка)
    СокращеннаяСсылка = СтрЗаменить(СокращеннаяСсылка, "https://goo.gl/", ""); 
    HTTPСоединение = Новый HTTPСоединение("goo.gl",,,,, Истина); // Истина для использования https
    HTTPЗапрос = Новый HTTPЗапрос("/" + СокращеннаяСсылка); 
    HTTPЗапрос.Заголовки.Вставить("Location", Истина); 

    Ответ = HTTPСоединение.Получить(HTTPЗапрос);
    РасширеннаяСсылка = Ответ.Заголовки["Location"];

    Возврат РасширеннаяСсылка; 
КонецФункции 

Функция ИзвлечьКоординаты(Ссылка)
	НачалоКоординат = Найти(Ссылка, "@") + 1;
	КонецКоординат = Найти(Сред(Ссылка, НачалоКоординат), ",");
	Долгота = СокрЛП(Сред(Ссылка, НачалоКоординат, КонецКоординат - 1));

	НачалоКоординат = НачалоКоординат + КонецКоординат;
	КонецКоординат = Найти(Сред(Ссылка, НачалоКоординат), "/");
	Широта = СокрЛП(Сред(Ссылка, НачалоКоординат, КонецКоординат - 1));
	
	// Обработка дополнительной информации в широте
	Если Найти(Широта, ",") Тогда
		Широта = Лев(Широта, Найти(Широта, ",") - 1);
	КонецЕсли;

	Возврат Новый Структура("Долгота, Широта", Долгота, Широта);
КонецФункции

Функция УдалитьСсылкиИПодписи(Текст, МассивКнопок)
    Для Каждого ВнешнийМассив Из МассивКнопок Цикл
        Для каждого ВнутреннийМассив Из ВнешнийМассив.Значение Цикл
            СтруктураКнопки = ВнутреннийМассив[0];
            Текст = СтрЗаменить(Текст, СтруктураКнопки["text"] + " " + СтруктураКнопки["url"], "");
        КонецЦикла;
    КонецЦикла;
    Возврат СокрЛП(Текст);
КонецФункции

Функция ОбрезатьСтроку(Строка)
    Возврат СтрЗаменить(СтрЗаменить(Строка, " ", ""), " ", "");
КонецФункции

		//Если СтруктураПараметров.Свойство("text") Тогда
		//    Текст = СтруктураПараметров["text"];
		//    МассивКнопок = РазделитьСсылкиИПодписи(Текст);
		//    Если МассивКнопок.Количество() > 0 Тогда
		//        СтруктураПараметров.Вставить("reply_markup", МассивКнопок);
		//    КонецЕсли;
		//КонецЕсли;




Функция СобратьТелоЗапроса(НакопленныеДанные)
			
			Перем РезультатСборки;
			
			СпособЗапроса 		= НакопленныеДанные.СпособЗапроса;
			СтруктураПараметров = НакопленныеДанные.СтруктураПараметров;
			
			СпособыЗапроса 		= Перечисления.ТелеграмСпособыЗапросов;
			Если СпособЗапроса = СпособыЗапроса.Простой Тогда
				РезультатСборки = Неопределено;
			ИначеЕсли СпособЗапроса = СпособыЗапроса.Джейсон Тогда
				ЗаписьДжейсон = Новый ЗаписьJSON;
				ЗаписьДжейсон.ПроверятьСтруктуру = Ложь;
				ЗаписьДжейсон.УстановитьСтроку(ТелеграмСервер.ПараметрыЗаписиJSON());
				
				// Проверить наличие ссылок и добавить кнопки
				Если СтруктураПараметров.Свойство("text") Тогда
					Текст = СтруктураПараметров["text"];
					Если СтрНайти(Текст, "https") > 0 Тогда
						МассивКнопок = РазделитьСсылкиИПодписи(Текст,НакопленныеДанные);
						Если МассивКнопок.Количество() > 0 Тогда
							СтруктураПараметров.Вставить("reply_markup", МассивКнопок);
							Текст = УдалитьСсылкиИПодписи(Текст, МассивКнопок);
							СтруктураПараметров.Вставить("text", Текст);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьJSON(ЗаписьДжейсон, СтруктураПараметров);
				РезультатСборки = ЗаписьДжейсон.Закрыть();
				РезультатСборки = ТелеграмСервер.ВставитьЭмодзи(РезультатСборки);
				
			ИначеЕсли СпособЗапроса = СпособыЗапроса.Кодированный Тогда
				
				РезультатСборки = "";
				Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
					Если РезультатСборки <> "" Тогда
						РезультатСборки = РезультатСборки + "&";
					КонецЕсли;
					ЗначениеСтрокой = ТелеграмСервер.ЗначениеСтрокой(КлючИЗначение.Значение);
					КодированноеЗначение = КодироватьСтроку(ЗначениеСтрокой, СпособКодированияСтроки.КодировкаURL, КодировкаТекста.UTF8);
					РезультатСборки = РезультатСборки + КлючИЗначение.Ключ + "=" + КодированноеЗначение;
				КонецЦикла;
				
			ИначеЕсли СпособЗапроса = СпособыЗапроса.Мультипарт Тогда
				
				СобираемыеФайлы = Новый Массив;
				
				Запрос 			= НакопленныеДанные.Запрос;
				ТипСодержимого 	= Запрос.Заголовки.Получить("Content-type");
				Разделитель 	= Сред(ТипСодержимого, 31); // После Boundary=
				
				ТекстСообщения = "";
				
				// Сборка сообщения - простые данные
				Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
					ЗначениеСтрокой = ТелеграмСервер.ЗначениеСтрокой(КлючИЗначение.Значение);
					ТекстСообщения = ТекстСообщения + "--" + Разделитель + Символы.ПС;
					ТекстСообщения = ТекстСообщения + "Content-Disposition: form-data; name=""" + КлючИЗначение.Ключ + """" + Символы.ПС + Символы.ПС;
					ТекстСообщения = ТекстСообщения + ЗначениеСтрокой + Символы.ПС;
				КонецЦикла;
				
				// Сборка сообщения — шапка для двоичных данных
				ВходнойФайлСтруктура = НакопленныеДанные.ВходнойФайлСтруктура;
				
				ТекстСообщения = ТекстСообщения + "--" + Разделитель + Символы.ПС;
				ТекстСообщения = ТекстСообщения + "Content-Disposition: form-data; name=""" + ВходнойФайлСтруктура.Ключ + """";
				Если ВходнойФайлСтруктура.Свойство("ИмяФайла") Тогда
					ТекстСообщения = ТекстСообщения + "; filename=""" + ВходнойФайлСтруктура.ИмяФайла + """";
				КонецЕсли;
				ТекстСообщения = ТекстСообщения + Символы.ПС + Символы.ПС;
				
				// Запись текста сообщения во временный файл
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
				ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
				ЗаписьТекста.Записать(ТекстСообщения);
				ЗаписьТекста.Закрыть();
				СобираемыеФайлы.Добавить(ИмяВременногоФайла);
				
				РасширениеФайла = Прав(ВходнойФайлСтруктура.ИмяФайла,3);
				// Подготовка отправляемого файла
				Если ВходнойФайлСтруктура.ВидИсточника = "Файл" Тогда
					ИмяОтправляемогоФайла = ВходнойФайлСтруктура.Источник;
				ИначеЕсли ВходнойФайлСтруктура.ВидИсточника = "АдресВХранилище" Тогда
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВходнойФайлСтруктура.Источник);
					ИмяОтправляемогоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
					ДвоичныеДанные.Записать(ИмяОтправляемогоФайла);
				ИначеЕсли ВходнойФайлСтруктура.ВидИсточника = "ДвоичныеДанные" Тогда
					ИмяОтправляемогоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
					ДвоичныеДанные = ВходнойФайлСтруктура.Источник;
					ДвоичныеДанные.Записать(ИмяОтправляемогоФайла);
				КонецЕсли;
				СобираемыеФайлы.Добавить(ИмяОтправляемогоФайла);
				
				// обрамление сборки
				ТекстСообщения = "" + Символы.ПС;
				ТекстСообщения = ТекстСообщения + "--" + Разделитель + "--";
				ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла(РасширениеФайла);
				ЗаписьТекста		= Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
				ЗаписьТекста.Записать(ТекстСообщения);
				ЗаписьТекста.Закрыть();
				СобираемыеФайлы.Добавить(ИмяВременногоФайла);
				
				// сборка
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
				ОбъединитьФайлы(СобираемыеФайлы, ИмяВременногоФайла);
				
				// Результат сборки
				РезультатСборки = Новый Файл(ИмяВременногоФайла);
				
				ФайлыКУдалению = Новый Массив;
				Для Каждого СобираемыйФайл Из СобираемыеФайлы Цикл
					ФайлыКУдалению.Добавить(СобираемыйФайл);
				КонецЦикла;
				ФайлыКУдалению.Добавить(ИмяВременногоФайла);
				НакопленныеДанные.Вставить("ФайлыКУдалению", ФайлыКУдалению);
				
			КонецЕсли;
			
			Возврат РезультатСборки;
			
		КонецФункции



//Функция СобратьТелоЗапроса(НакопленныеДанные)
//	
//	Перем РезультатСборки;
//	
//	СпособЗапроса 		= НакопленныеДанные.СпособЗапроса;
//	СтруктураПараметров = НакопленныеДанные.СтруктураПараметров;
//	
//	СпособыЗапроса 		= Перечисления.ТелеграмСпособыЗапросов;
//	Если СпособЗапроса = СпособыЗапроса.Простой Тогда
//		
//		РезультатСборки = Неопределено;
//		
//	ИначеЕсли СпособЗапроса = СпособыЗапроса.Джейсон Тогда
//		
//		ЗаписьДжейсон = Новый ЗаписьJSON;
//		ЗаписьДжейсон.ПроверятьСтруктуру = Ложь;
//		ЗаписьДжейсон.УстановитьСтроку(ТелеграмСервер.ПараметрыЗаписиJSON());
//		ЗаписатьJSON(ЗаписьДжейсон, СтруктураПараметров);
//		РезультатСборки = ЗаписьДжейсон.Закрыть();
//		РезультатСборки = ТелеграмСервер.ВставитьЭмодзи(РезультатСборки);
//		
//	ИначеЕсли СпособЗапроса = СпособыЗапроса.Кодированный Тогда
//		
//		РезультатСборки = "";
//		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
//			Если РезультатСборки <> "" Тогда
//				РезультатСборки = РезультатСборки + "&";
//			КонецЕсли;
//			ЗначениеСтрокой = ТелеграмСервер.ЗначениеСтрокой(КлючИЗначение.Значение);
//			КодированноеЗначение = КодироватьСтроку(ЗначениеСтрокой, СпособКодированияСтроки.КодировкаURL, КодировкаТекста.UTF8);
//			РезультатСборки = РезультатСборки + КлючИЗначение.Ключ + "=" + КодированноеЗначение;
//		КонецЦикла;
//		
//	ИначеЕсли СпособЗапроса = СпособыЗапроса.Мультипарт Тогда
//		
//		СобираемыеФайлы = Новый Массив;
//		
//		Запрос 			= НакопленныеДанные.Запрос;
//		ТипСодержимого 	= Запрос.Заголовки.Получить("Content-type");
//		Разделитель 	= Сред(ТипСодержимого, 31); // После Boundary=
//		
//		ТекстСообщения = "";
//		
//		// Сборка сообщения - простые данные
//		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
//			ЗначениеСтрокой = ТелеграмСервер.ЗначениеСтрокой(КлючИЗначение.Значение);
//			ТекстСообщения = ТекстСообщения + "--" + Разделитель + Символы.ПС;
//			ТекстСообщения = ТекстСообщения + "Content-Disposition: form-data; name=""" + КлючИЗначение.Ключ + """" + Символы.ПС + Символы.ПС;
//			ТекстСообщения = ТекстСообщения + ЗначениеСтрокой + Символы.ПС;
//		КонецЦикла;
//		
//		// Сборка сообщения — шапка для двоичных данных
//		ВходнойФайлСтруктура = НакопленныеДанные.ВходнойФайлСтруктура;
//		
//		ТекстСообщения = ТекстСообщения + "--" + Разделитель + Символы.ПС;
//		ТекстСообщения = ТекстСообщения + "Content-Disposition: form-data; name=""" + ВходнойФайлСтруктура.Ключ + """";
//		Если ВходнойФайлСтруктура.Свойство("ИмяФайла") Тогда
//			ТекстСообщения = ТекстСообщения + "; filename=""" + ВходнойФайлСтруктура.ИмяФайла + """";
//		КонецЕсли;
//		ТекстСообщения = ТекстСообщения + Символы.ПС + Символы.ПС;
//		
//		// Запись текста сообщения во временный файл
//		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
//		ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
//		ЗаписьТекста.Записать(ТекстСообщения);
//		ЗаписьТекста.Закрыть();
//		СобираемыеФайлы.Добавить(ИмяВременногоФайла);
//		
//		РасширениеФайла = Прав(ВходнойФайлСтруктура.ИмяФайла,3);
//		// Подготовка отправляемого файла
//		Если ВходнойФайлСтруктура.ВидИсточника = "Файл" Тогда
//			ИмяОтправляемогоФайла = ВходнойФайлСтруктура.Источник;
//		ИначеЕсли ВходнойФайлСтруктура.ВидИсточника = "АдресВХранилище" Тогда
//			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВходнойФайлСтруктура.Источник);
//			ИмяОтправляемогоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
//			ДвоичныеДанные.Записать(ИмяОтправляемогоФайла);
//		ИначеЕсли ВходнойФайлСтруктура.ВидИсточника = "ДвоичныеДанные" Тогда
//			ИмяОтправляемогоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
//			ДвоичныеДанные = ВходнойФайлСтруктура.Источник;
//			ДвоичныеДанные.Записать(ИмяОтправляемогоФайла);
//		КонецЕсли;
//		СобираемыеФайлы.Добавить(ИмяОтправляемогоФайла);
//		
//		// обрамление сборки
//		ТекстСообщения = "" + Символы.ПС;
//		ТекстСообщения = ТекстСообщения + "--" + Разделитель + "--";
//		ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла(РасширениеФайла);
//		ЗаписьТекста		= Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
//		ЗаписьТекста.Записать(ТекстСообщения);
//		ЗаписьТекста.Закрыть();
//		СобираемыеФайлы.Добавить(ИмяВременногоФайла);
//		
//		// сборка
//		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
//		ОбъединитьФайлы(СобираемыеФайлы, ИмяВременногоФайла);
//		
//		// Результат сборки
//		РезультатСборки = Новый Файл(ИмяВременногоФайла);
//		
//		ФайлыКУдалению = Новый Массив;
//		Для Каждого СобираемыйФайл Из СобираемыеФайлы Цикл
//			ФайлыКУдалению.Добавить(СобираемыйФайл);
//		КонецЦикла;
//		ФайлыКУдалению.Добавить(ИмяВременногоФайла);
//		НакопленныеДанные.Вставить("ФайлыКУдалению", ФайлыКУдалению);
//		
//	КонецЕсли;
//	
//	Возврат РезультатСборки;
//	
//КонецФункции

Функция ВыполнитьМетод(ДанныеБота, Метод, СтруктураПараметров = Неопределено, СпособЗапроса = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	// Автоподбор способа ХТТП запроса
	Если СпособЗапроса = Неопределено Тогда
		СпособЗапроса = Перечисления.ТелеграмСпособыЗапросов.ПодобратьСпособЗапроса(Метод, СтруктураПараметров);
	КонецЕсли;
	
	// Перемещение двоичных данных в другую структуру
	Если СтруктураПараметров.Свойство("ВходнойФайлСтруктура") = Истина Тогда
		ВходнойФайлСтруктура = СтруктураПараметров.ВходнойФайлСтруктура;
		СтруктураПараметров.Удалить("ВходнойФайлСтруктура");
	Иначе
		ВходнойФайлСтруктура = Неопределено;
	КонецЕсли;
	
	// Инициализация ХТТП запроса
	Запрос = СоздатьЗапрос(Перечисления.ТелеграмСпособыЗапросов.ТипСодержимого(СпособЗапроса));
	
	// Структуризация данных
	НакопленныеДанные = Новый Структура;
	НакопленныеДанные.Вставить("ДанныеБота", 				ДанныеБота);
	НакопленныеДанные.Вставить("Метод", 					Метод);
	НакопленныеДанные.Вставить("Запрос", 					Запрос);
	НакопленныеДанные.Вставить("СпособЗапроса", 			СпособЗапроса);
	НакопленныеДанные.Вставить("СтруктураПараметров", 		СтруктураПараметров);
	НакопленныеДанные.Вставить("ВходнойФайлСтруктура",		ВходнойФайлСтруктура);
	
	// Сборка ХТТП запроса
	Запрос.АдресРесурса = СобратьАдресРесурса(НакопленныеДанные);
	ТелоЗапроса = СобратьТелоЗапроса(НакопленныеДанные);
	Если ТипЗнч(ТелоЗапроса) = Тип("Строка") Тогда
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	ИначеЕсли ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные") Тогда
		Запрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
	ИначеЕсли ТипЗнч(ТелоЗапроса) = Тип("Файл") Тогда
		Запрос.УстановитьИмяФайлаТела(ТелоЗапроса.ПолноеИмя);
	КонецЕсли;
	
	// Инициализация ХТТП соединения
	Соединение = СоздатьСоединение();
	
	// Отправка ПОСТ-запроса, получение ответа
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	// Удаление временных файлов, если необходимо
	Если НакопленныеДанные.Свойство("ФайлыКУдалению") = Истина Тогда
		ФайлыКУдалению = НакопленныеДанные.ФайлыКУдалению;
		Для Каждого ФайлКУдалению Из ФайлыКУдалению Цикл
			УдалитьФайлы(КаталогВременныхФайлов(), ФайлКУдалению);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаJSON = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	РегистрыСведений.ТелеграмЖурнал.ДобавитьЗапись(ДанныеБота.Бот, СтрокаJSON, Метод);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтрокаJSON;
	
КонецФункции
