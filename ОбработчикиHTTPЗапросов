//основные обработчики http-запросов 

Процедура ПолучитьДанныеСклада(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
|	ERP_STO_АктУслугСТОСчет.Характеристика КАК Характеристика,
|	ERP_STO_АктУслугСТОСчет.Количество КАК Количество,
|	ERP_STO_АктУслугСТОСчет.Характеристика.Владелец КАК ХарактеристикаВладелец
|ПОМЕСТИТЬ ПересчетНачальныйОстаток
|ИЗ
|	Документ.ERP_STO_АктУслугСТО.Счет КАК ERP_STO_АктУслугСТОСчет
|ГДЕ
|	ERP_STO_АктУслугСТОСчет.Ссылка.Ссылка = &СсылкаНачальныйОстаток
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ERP_STO_АктУслугСТОСчет.Характеристика.Владелец КАК ХарактеристикаВладелец,
|	ERP_STO_АктУслугСТОСчет.Характеристика КАК Характеристика,
|	ERP_STO_АктУслугСТОСчет.Количество КАК Количество
|ПОМЕСТИТЬ ПересчетКонечныйОстаток
|ИЗ
|	Документ.ERP_STO_АктУслугСТО.Счет КАК ERP_STO_АктУслугСТОСчет
|ГДЕ
|	ERP_STO_АктУслугСТОСчет.Ссылка.Ссылка = &СсылкаКонечныйОстаток
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ERP_STO_АктУслугСТОСчет.Характеристика.Владелец КАК ХарактеристикаВладелец,
|	ERP_STO_АктУслугСТОСчет.Характеристика КАК Характеристика,
|	ERP_STO_АктУслугСТОСчет.Количество КАК Количество
|ПОМЕСТИТЬ оборотприход
|ИЗ
|	Документ.ERP_STO_АктУслугСТО.Счет КАК ERP_STO_АктУслугСТОСчет
|ГДЕ
|	ERP_STO_АктУслугСТОСчет.Ссылка.ПостВыполненияРабот = &ПостВыполненияРаботОборот
|	И ERP_STO_АктУслугСТОСчет.Ссылка.Дата МЕЖДУ &ДатаОборотовН И &ДатаОборотовК
|	И ERP_STO_АктУслугСТОСчет.Ссылка.Филиал = &Филиал
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ERP_STO_АктУслугСТОСчет.Характеристика.Владелец КАК ХарактеристикаВладелец,
|	ERP_STO_АктУслугСТОСчет.Характеристика КАК Характеристика,
|	ERP_STO_АктУслугСТОСчет.Количество КАК Количество
|ПОМЕСТИТЬ оборотрасход
|ИЗ
|	Документ.ERP_STO_АктУслугСТО.Счет КАК ERP_STO_АктУслугСТОСчет
|ГДЕ
|	ERP_STO_АктУслугСТОСчет.Ссылка.ПостВыполненияРабот <> &ПостВыполненияРаботОборот
|	И ERP_STO_АктУслугСТОСчет.Ссылка.Дата МЕЖДУ &ДатаОборотовН И &ДатаОборотовК
|	И ERP_STO_АктУслугСТОСчет.Ссылка.Филиал = &Филиал
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|    ПересчетНачальныйОстаток.ХарактеристикаВладелец КАК ХарактеристикаВладелец,
|    ПересчетНачальныйОстаток.Характеристика КАК Характеристика,
|    МАКСИМУМ(ПересчетНачальныйОстаток.Количество) КАК было,
|    СУММА(оборотприход.Количество) КАК приход,
|    СУММА(оборотрасход.Количество) КАК расход,
|    МАКСИМУМ(ПересчетНачальныйОстаток.Количество) + СУММА(оборотприход.Количество) - СУММА(оборотрасход.Количество) КАК должноБылоОстаться,
|    МАКСИМУМ(ПересчетКонечныйОстаток.Количество) КАК осталосьпофакту,
|    МАКСИМУМ(ПересчетНачальныйОстаток.Количество) + СУММА(оборотприход.Количество) - СУММА(оборотрасход.Количество) - МАКСИМУМ(ПересчетКонечныйОстаток.Количество) КАК расхождение
|ИЗ
|    ПересчетНачальныйОстаток КАК ПересчетНачальныйОстаток
|        ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Характеристика, СУММА(Количество) КАК Количество ИЗ оборотприход СГРУППИРОВАТЬ ПО Характеристика) КАК оборотприход
|        ПО (ПересчетНачальныйОстаток.Характеристика = оборотприход.Характеристика)
|        ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Характеристика, СУММА(Количество) КАК Количество ИЗ оборотрасход СГРУППИРОВАТЬ ПО Характеристика) КАК оборотрасход
|        ПО (ПересчетНачальныйОстаток.Характеристика = оборотрасход.Характеристика)
|        ПОЛНОЕ СОЕДИНЕНИЕ ПересчетКонечныйОстаток КАК ПересчетКонечныйОстаток
|        ПО (ПересчетНачальныйОстаток.Характеристика = ПересчетКонечныйОстаток.Характеристика)
|СГРУППИРОВАТЬ ПО
|    ПересчетНачальныйОстаток.ХарактеристикаВладелец,
|    ПересчетНачальныйОстаток.Характеристика;
|
|////////////////////////////////////////////////////////////////////////////////
|////////////////////////////////////////////////////////////////////////////////";
	
	Запрос.УстановитьПараметр("Склад", Справочники.Склады.НайтиПоНаименованию("Львовский склад"));
	Запрос.УстановитьПараметр("ДатаОстатков", Дата("20230423235959"));
	Запрос.УстановитьПараметр("ПостВыполненияРаботОборот",Справочники.ERP_STO_ПостыВыполненияРабот.НайтиПоНаименованию("ЗТ(Л)") );
	Запрос.УстановитьПараметр("ДатаОборотовК", Дата("20230424000000"));
	Запрос.УстановитьПараметр("ДатаОборотовН", Дата("20221226000000"));
	Запрос.УстановитьПараметр("Филиал", Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Львів"));
	Запрос.УстановитьПараметр("СсылкаКонечныйОстаток", Документы.ERP_STO_АктУслугСТО.НайтиПоНомеру("BG-039386"));
	Запрос.УстановитьПараметр("СсылкаНачальныйОстаток", Документы.ERP_STO_АктУслугСТО.НайтиПоНомеру("BG0035623")); 
	
	
	РезультатЗапрос = Запрос.Выполнить();
	Если РезультатЗапрос.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапрос.Выбрать();
	МассивДанных = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура;
		
		Если Выборка.ХарактеристикаВладелец = Неопределено Тогда
			СтруктураДанных.Вставить("ХарактеристикаВладелец", "");
		Иначе
			СтруктураДанных.Вставить("ХарактеристикаВладелец", Строка(Выборка.ХарактеристикаВладелец));
		КонецЕсли; 
		Если Выборка.Характеристика = Неопределено Тогда
			СтруктураДанных.Вставить("Характеристика", "");
		Иначе
			СтруктураДанных.Вставить("Характеристика", Строка(Выборка.Характеристика));
		КонецЕсли;
		
		Если Выборка.было = Неопределено или не значениезаполнено(Выборка.было) Тогда
			СтруктураДанных.Вставить("было", 0);
		Иначе
			СтруктураДанных.Вставить("было", число(Выборка.было));
		КонецЕсли;
		Если Выборка.приход = Неопределено или не значениезаполнено(Выборка.приход) Тогда
			СтруктураДанных.Вставить("приход", 0);
		Иначе
			СтруктураДанных.Вставить("приход", число(Выборка.приход));
		КонецЕсли; 
		Если Выборка.расход = Неопределено или не значениезаполнено(Выборка.расход) Тогда
			СтруктураДанных.Вставить("расход", 0);
		Иначе
			СтруктураДанных.Вставить("расход", число(Выборка.расход));
		КонецЕсли;
		Если Выборка.должноБылоОстаться = Неопределено или не значениезаполнено(Выборка.должноБылоОстаться) Тогда
			СтруктураДанных.Вставить("должноБылоОстаться", 0);
		Иначе
			СтруктураДанных.Вставить("должноБылоОстаться", число(Выборка.должноБылоОстаться));
		КонецЕсли;
		Если Выборка.осталосьпофакту = Неопределено или не значениезаполнено(Выборка.осталосьпофакту) Тогда
			СтруктураДанных.Вставить("осталосьпофакту", 0);
		Иначе
			СтруктураДанных.Вставить("осталосьпофакту", число(Выборка.осталосьпофакту));
		КонецЕсли;
		Если Выборка.расхождение = Неопределено или не значениезаполнено(Выборка.расхождение) Тогда
			СтруктураДанных.Вставить("расхождение", 0);
		Иначе
			СтруктураДанных.Вставить("расхождение", число(Выборка.расхождение));
		КонецЕсли;
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Результат = Ответы.СериализоватьВJSON(МассивДанных, Ложь);
КонецПроцедуры


Функция НачальнаяСтраницаGet(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	ИнфоОПользователе = АвторизацияWeb1C.СессияАктивна(Запрос, "Главная страница");
	Если ИнфоОПользователе.Успех Тогда
		//открываем форму списка
		ДанныеПользователя = ОбщегоНазначенияСайтПовтИсп.ПолучитьДанныеПользователя(ИнфоОПользователе);
		
		ВходящиеПараметры = Новый Структура;
		ВходящиеПараметры.Вставить("ОбъектАвторизации", ДанныеПользователя.ОбъектАвторизации);
		ВходящиеПараметры.Вставить("Пользователь", ДанныеПользователя.Пользователь);
		ДанныеПользователя.Вставить("Параметры", ВходящиеПараметры);
		
		//получаем текст страницы
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.НачальнаяСтраница"), Ответ, ДанныеПользователя);
	Иначе
		//открываем начальную старницу
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаАвторизации"), Ответ, Неопределено);
		УправлениеКуки.CoockieВОтвет(Ответ, "NextURL", Запрос.БазовыйURL + Запрос.ОтносительныйURL, ТекущаяДата() + 60, "/");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция CтраницаВыпискиGet(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	ИнфоОПользователе = АвторизацияWeb1C.СессияАктивна(Запрос, "Страница выписки");
	Если ИнфоОПользователе.Успех Тогда
		//открываем форму списка
		ДанныеПользователя = ОбщегоНазначенияСайтПовтИсп.ПолучитьДанныеПользователя(ИнфоОПользователе);
		
		ВходящиеПараметры = Новый Структура;
		ВходящиеПараметры.Вставить("ОбъектАвторизации", ДанныеПользователя.ОбъектАвторизации);
		ВходящиеПараметры.Вставить("Пользователь", ДанныеПользователя.Пользователь);
		ДанныеПользователя.Вставить("Параметры", ВходящиеПараметры);
		
		//получаем текст страницы
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаОтчетов"), Ответ, ДанныеПользователя);
	Иначе
		//открываем начальную старницу
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаОтчетов"), Ответ, Неопределено);
		УправлениеКуки.CoockieВОтвет(Ответ, "NextURL", Запрос.БазовыйURL + Запрос.ОтносительныйURL, ТекущаяДата() + 60, "/");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ДействиеPOST(Запрос) Экспорт
	//при POST-запросе надо указать серверу, чтобы ушел редирект на  Location
	//необходимо дабы при обновлении страницы не происходила повторная отправка запроса
	//Запрос.
	Ответ = Новый HTTPСервисОтвет(303);
	
	Действие = Запрос.ПараметрыURL["Действие"];
	
	ИнфоОПользователе = АвторизацияWeb1C.СессияАктивна(Запрос, "АвторизацияWeb1C - " + Действие);
	Если Действие = "login" Тогда
		АвторизацияWeb1C.ЛогинЛогаут(Запрос, Ответ);
		//в результате авторизации получаем ответ
	КонецЕсли;
	
	Куки = УправлениеКуки.ПолучитьCoockie(Запрос);
	Если Куки.Получить("NextURL") <> Неопределено Тогда
		Ответ.Заголовки.Вставить("Location", Куки.Получить("NextURL"));
	Иначе
		Ответ.Заголовки.Вставить("Location", Запрос.БазовыйURL);
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ДействиеGET(Запрос) Экспорт
	//при POST-запросе надо указать серверу, чтjбы ушел редирект на  Location
	//необходимо дабы при обновлении страницы не происходила повторная отправка запроса
	Ответ = Новый HTTPСервисОтвет(303);
	
	Действие = Запрос.ПараметрыURL["Действие"];
	Если Действие = "logout" Тогда
		АвторизацияWeb1C.ЛогинЛогаут(Запрос, Ответ);
	КонецЕсли;
	
	Ответ.Заголовки.Вставить("Location", Запрос.БазовыйURL);
	
	Возврат Ответ;
КонецФункции

Функция ВходПоТокенуGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(303);
	
	ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
	Если ПараметрыЗапроса.Получить("id") <> Неопределено Тогда
		Токен = ПараметрыЗапроса.Получить("id");
		ОписаниеТипа = Новый ОписаниеТипов("УникальныйИдентификатор");
		Если ЗначениеЗаполнено(Токен) Тогда
			ОписаниеТокена = АвторизацияWeb1C.ПолучитьОписаниеТокена(Токен);
			Если ОписаниеТокена.Токен = Неопределено Тогда
				П = Новый Структура; 
				П.Вставить("ОшибкаАвторизации", "Информация по токену не получена. Возможно вы передали неверный токен.");
				Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаАвторизации"), Ответ, П);
			Иначе
				//если у токена истек срок использования - страницы авторизации
				Если ОписаниеТокена.СрокДействия < ТекущаяДата() Тогда
					АвторизацияWeb1C.ДеактивироватьТокен(Токен, Неопределено);
					
					П = Новый Структура; 
					П.Вставить("ОшибкаАвторизации", "Истек срок годности токена!");
					Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаАвторизации"), Ответ, П);
				ИначеЕсли ОписаниеТокена.ПользовательОтключен Тогда
					АвторизацияWeb1C.ДеактивироватьТокен(Токен, Неопределено);
					
					П = Новый Структура; 
					П.Вставить("ОшибкаАвторизации", "Ваш аккаунт отключен! Обратитесь к вашему менеджеру.");
					Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаАвторизации"), Ответ, П);
				Иначе
					//смотрим через куки, есть ли у сеанса хеш логин
					//если есть - надо деактивировать и потом выдать новый
					Куки = УправлениеКуки.ПолучитьCoockie(Запрос);
					hash_login = Куки.Получить("hash_login");
					АвторизацияWeb1C.ДеактивироватьСессию(hash_login);
					
					//создаем новую сессию
					Сессия = АвторизацияWeb1C.СоздатьСессию(ОписаниеТокена.Пользователь, Ложь, Запрос.Заголовки.Получить("User-Agent"));
					
					АвторизацияWeb1C.ЗаписатьАктивность(Запрос, ОписаниеТокена.Пользователь, "Вход по токену");
					АвторизацияWeb1C.ДеактивироватьТокен(Токен, Сессия.id);
					УправлениеКуки.CoockieВОтвет(Ответ, "hash_login", Сессия.id, Сессия.Истекает, "/");
				КонецЕсли;
			КонецЕсли;
		Иначе
			//получаем текст страницы
			Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.Страница404"), Ответ, Неопределено);
		КонецЕсли;
	Иначе
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.Страница404"), Ответ, Неопределено);
	КонецЕсли;
		
	Ответ.Заголовки.Вставить("Location", Запрос.БазовыйURL);
	
	Возврат Ответ;
КонецФункции

Функция APIPOST(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	
	// Создаем новое соответствие
	НовоеСоответствие = Новый Соответствие;
	
	// Копируем все значения из фиксированного соответствия
	Для Каждого Элемент Из Запрос.ПараметрыЗапроса Цикл
		НовоеСоответствие.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Если НовоеСоответствие.Количество() = 0 Тогда
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ТелоЗапроса);
		JSONСтруктура = ПрочитатьJSON(Чтение);
		//Если ТипЗнч(JSONСтруктура.contacts) = Тип("Массив") Тогда
		Если 1=2 Тогда
        МассивКонтактов = JSONСтруктура.contacts;
    	Иначе
		//ТекстВнутреннегоJSON = JSONСтруктура.contacts;
		//ТекстВнутреннегоJSON = СтрЗаменить(ТекстВнутреннегоJSON, Символ(13), "");
		//ТекстВнутреннегоJSON = СтрЗаменить(ТекстВнутреннегоJSON, Символ(10), "");
		//ТекстВнутреннегоJSONЧтение = Новый ЧтениеJSON;
		//ТекстВнутреннегоJSONЧтение.УстановитьСтроку(ТекстВнутреннегоJSON);
		//МассивКонтактов = ПрочитатьJSON(ТекстВнутреннегоJSONЧтение);
		КонецЕсли;
	КонецЕсли;
	
	ИнфоОПользователе = АвторизацияWeb1C.СессияАктивна(Запрос, "",JSONСтруктура);
	

	//Если ИнфоОПользователе.Успех Тогда
	Если 1=1 Тогда
		СписокКонтактов = Новый СписокЗначений;
		//получаем данные
		ДанныеПользователя = ОбщегоНазначенияСайтПовтИсп.ПолучитьДанныеПользователя(ИнфоОПользователе);
		
		
		запросСтрокой = Запрос.ПолучитьТелоКакСтроку(); 
		ПараметрыЗапроса = ПолучитьДанныеИзJSON(запросСтрокой);
		//ПараметрыЗапроса = ПолучитьПараметры(запросСтрокой);
		
		Если ПараметрыЗапроса.Количество() = 0 Тогда
			ПараметрыЗапроса = Новый Структура;
			Для Каждого Элемент Из JSONСтруктура Цикл
				ПараметрыЗапроса.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
		КонецЕсли;
		Результат = "#"; //в результате успешного выполнения переменная будет со значением
		Ошибка = "";
		Если ПараметрыЗапроса.Свойство("method")Тогда
			Метод = ПараметрыЗапроса["method"];
			//АвторизацияWeb1C.ЗаписатьАктивность(Запрос, ИнфоОПользователе.Пользователь, "API, метод - " + Метод);
			Если Метод = "TelegramPost" Тогда //получение список контактов для отправки
				ТелеграмPost(Запрос,ПараметрыЗапроса.key);
			ИначеЕсли Метод = "getParametersReport" Тогда //получение параметров отчета
				ПолучитьПараметрыОтчета(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка)
			ИначеЕсли Метод = "changeAct" Тогда //получение параметров отчета
				ИзменитьАктДиагностики(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка)
			ИначеЕсли Метод = "addRecord" Тогда //получение параметров отчета
				ДобавитьАктУслуг(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка)
			ИначеЕсли Метод = "SendSmsToContacts" Тогда //получение список контактов для отправки 
				Если ПараметрыЗапроса.Свойство("message") Тогда
					ТекстСообщения = ПараметрыЗапроса["message"];					
					ОтправитьСообщениеКонтактам(МассивКонтактов, ТекстСообщения);
					//ПолучитьCписокКонтактовДляОтправки(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка, ТекстСообщения);
				Иначе
					Ошибка = "Текст сообщения не передан";
				КонецЕсли;
				//ОтправитьСообщениеКонтактам(СписокКонтактов, ТекстСообщения);
				//ПолучитьCписокКонтактовДляОтправки(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка,ТекстСообщения);
			Иначе 
				Ошибка = "Вызов неизвестного метода - " + Метод;
			КонецЕсли;
		Иначе
			Ошибка = "Неправильный вызов - не указан метод";
		КонецЕсли;
		
		ДанныеСериализации = Новый Структура;
		ДанныеСериализации.Вставить("result", Результат);
		ДанныеСериализации.Вставить("error", Ошибка);
		РезультатJSON = Ответы.СериализоватьВJSON(ДанныеСериализации);
		
		Ответ.УстановитьТелоИзСтроки(РезультатJSON);
		
		Ответ.Заголовки.Вставить("Content-Type","application/json");
	КонецЕсли;
	
	
	Возврат Ответ;
КонецФункции 

Функция ПолучитьДанныеИзJSON(Знач ТекстJSON) Экспорт  
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);  		
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
	Результат = Неопределено;
	Попытка
		ОбъектJSON = ПрочитатьJSON(ТекстJSON);
		Результат = ПреобразоватьJSONВСтруктуру(ОбъектJSON);
	Исключение
		// В случае ошибки чтения JSON
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ПреобразоватьJSONВСтруктуру(ОбъектJSON)
	Если ТипЗнч(ОбъектJSON) = Тип("Структура") Тогда
		Для Каждого Свойство Из ОбъектJSON Цикл
			Если ТипЗнч(Свойство.Значение) = Тип("Структура") Или ТипЗнч(Свойство.Значение) = Тип("Массив") Тогда
				ОбъектJSON[Свойство.Ключ] = ПреобразоватьJSONВСтруктуру(Свойство.Значение);
			КонецЕсли;
		КонецЦикла;
		Возврат ОбъектJSON;
	ИначеЕсли ТипЗнч(ОбъектJSON) = Тип("Массив") Тогда
		Для i = 0 По ОбъектJSON.ВГраница() Цикл
			Если ТипЗнч(ОбъектJSON[i]) = Тип("Структура") Или ТипЗнч(ОбъектJSON[i]) = Тип("Массив") Тогда
				ОбъектJSON[i] = ПреобразоватьJSONВСтруктуру(ОбъектJSON[i]);
			КонецЕсли;
		КонецЦикла;
		Возврат ОбъектJSON;
	Иначе
		Возврат ОбъектJSON;
	КонецЕсли;
КонецФункции


Функция ПолучитьПараметры(Тело)Экспорт
	
	Результат = Новый Структура;
	Тело = РаскодироватьСтроку(Тело, СпособКодированияСтроки.КодировкаURL, "UTF-8");
	Тело = СтрЗаменить(Тело, "+", " ");
	ПарметрыЗначения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Тело, "&");
	Для Каждого Пар Из ПарметрыЗначения Цикл
		
		мПар = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Пар, "=");
		Если мПар.Количество() > 1 Тогда
			СущЗначениеПараметра = "";
			
			Попытка
				Результат.Свойство(мПар[0], СущЗначениеПараметра);
			Исключение
				Продолжить;	
			КонецПопытки;
			
			//Если в структуре нет такого параметра, просто его добавляем.
			Если ПустаяСтрока(СущЗначениеПараметра) Тогда 
				Результат.Вставить(мПар[0], мПар[1]);
			Иначе
				
				//Если такой параметр есть и значени его находится в массиве, то добавляем
				//текущий параметр в массив.
				Если ТипЗнч(СущЗначениеПараметра) = Тип("Массив") Тогда 
					СущЗначениеПараметра.Добавить(мПар[1]);
					Результат.Вставить(мПар[0], СущЗначениеПараметра);
					
					//Если это второе значение параметра, то добавляем уже существующее и текущее
					//значение в массив.	
				Иначе 
					МассивЗначЭтогоПараметра = Новый Массив();
					МассивЗначЭтогоПараметра.Добавить(СущЗначениеПараметра);
					МассивЗначЭтогоПараметра.Добавить(мПар[1]);
					Результат.Вставить(мПар[0], МассивЗначЭтогоПараметра);
				КонецЕсли;
			КонецЕсли;
			//Результат.Вставить(мПар[0], мПар[1]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции  

Функция ТелеграмPost(Запрос,ВебхукКлюч)
	
	//ВебхукКлюч = Запрос.ПараметрыURL["Ключ"];
	//ВебхукКлюч = Запрос.key;        	
	ДанныеБота = ТелеграмСервер.ПолучитьДанныеБотаПоКлючу(ВебхукКлюч);
	Если ДанныеБота = Неопределено Тогда
		Ответ = Новый HTTPСервисОтвет(404);
		Возврат Ответ;
	КонецЕсли; 
	
	//СтруктураДанных = Запрос.message;
    
    // Преобразуем структуру данных в строку JSON (если требуется)
    //СтрокаJSON = СтрокаВФорматеJSON(СтруктураДанных);
	
	СтрокаJSON = Запрос.ПолучитьТелоКакСтроку();
	
	РегистрыСведений.ТелеграмЖурнал.ДобавитьЗапись(ДанныеБота.Бот, СтрокаJSON, "Webhook", "ВХ");
	Попытка
		РегистрыСведений.MessengerCorrespondence.ДобавитьЗапись(ДанныеБота.Бот, СтрокаJSON, "Webhook", "ВХ");	
	Исключение
		//ОписаниеОшибки()
	КонецПопытки;
	
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Обновление = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
	Попытка
	КоличествоФайлов = Обновление.message.message.photo.photo.Владелец.photo.ВладеющееСвойство.ОбъектВладелец.photo.Владелец.photo.количество();	
	Исключение
	КоличествоФайлов = 0;
	КонецПопытки;
	ДатаОбновления = ТекущаяДата(); // или другое соответствующее значение
	ТелеграмСервер.ОбработатьВходящееОбновлениеБота(Обновление.message, ДанныеБота,КоличествоФайлов,ДатаОбновления);
	
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
	
КонецФункции  

Функция ТелеграмGet(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Тело = "<HTML><HEAD><meta charset=""utf-8""></HEAD><BODY>Привет, я GET-метод бота Telegram. Ключ: " + Запрос.ПараметрыURL["Ключ"] + "</BODY></HTML>";
	Ответ.УстановитьТелоИзСтроки(Тело, КодировкаТекста.UTF8);
	Возврат Ответ;
	
КонецФункции


Функция APIGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИнфоОПользователе = АвторизацияWeb1C.СессияАктивна(Запрос, "");
	//Машина = Справочники.ERP_STO_Автомобили.ПолучитьСсылку(Новый УникальныйИдентификатор(Запрос.ПараметрыЗапроса.Получить("hash_login")));
	ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
	Результат = "#";
	Ошибка = "";
	Если 1=2 Тогда
		Если ПараметрыЗапроса.Получить("method") <> Неопределено Тогда
			Метод = ПараметрыЗапроса.Получить("method");
			Если Метод = "getAuto" Тогда //получение параметров отчета
				ПолучитьАвто(Неопределено, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getAutOwner" Тогда //получение параметров отчета
				ПолучитьАвтоВладельца(Неопределено, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getHistoryAutOwner" Тогда //получение параметров отчета
				ПолучитьИсториюАвтоВладельца(Неопределено, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getRROStatus" Тогда //получение список касс и их статуса
				ПолучитьCтатусRRO(Неопределено, ПараметрыЗапроса, Результат, Ошибка);	
			Иначе
				Ошибка = "Неправильный вызов - не указан метод";
			КонецЕсли; 
			ДанныеСериализации = Новый Структура;
			ДанныеСериализации.Вставить("result", Результат);
			ДанныеСериализации.Вставить("error", Ошибка);
			РезультатJSON = Ответы.СериализоватьВJSON(ДанныеСериализации);
			
			Ответ.УстановитьТелоИзСтроки(РезультатJSON);
			
			Ответ.Заголовки.Вставить("Content-Type","application/json");	
		КонецЕсли;
	КонецЕсли;
	
	Если 1=1 Тогда
		//получаем данные
		ДанныеПользователя = ОбщегоНазначенияСайтПовтИсп.ПолучитьДанныеПользователя(ИнфоОПользователе);
		
		ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
		Результат = "#"; //в результате успешного выполнения переменная будет со значением
		Ошибка = "";
		Если ПараметрыЗапроса.Получить("method") <> Неопределено Тогда
			Метод = ПараметрыЗапроса.Получить("method");
			АвторизацияWeb1C.ЗаписатьАктивность(Запрос, ИнфоОПользователе.Пользователь, "API, метод - " + Метод);
			Если Метод = "getFilials" Тогда //получение параметров отчета
				ПолучитьФилиалы(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getPosts" Тогда //получение параметров отчета
				ПолучитьПосты(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getClients" Тогда //получение параметров отчета
				ПолучитьКлиентов(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getAuto" Тогда //получение параметров отчета
				ПолучитьАвто(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getAutOwner" Тогда //получение параметров отчета
				ПолучитьАвтоВладельца(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getHistoryAutOwner" Тогда //получение параметров отчета
				ПолучитьИсториюАвтоВладельца(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getTimeList" Тогда //получение параметров отчета
				ПолучитьСписокВремениЗаписи(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getCalendarData" Тогда //получение данных для календаря
				ПолучитьДанныеКалендаря(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getWarehouseReport" Тогда //получение данных для календаря
				ПолучитьДанныеСклада(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getAnalyticalReport" Тогда //получение данных для графика
				ПолучитьГрафикиАналитика(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getAnalyticalReportLove" Тогда //получение данных о остатках
				ПолучитьГрафикиАналитикаЛюбви(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка); 
			ИначеЕсли Метод = "getBalance" Тогда //получение данных для календаря
				ПолучитьОстаткиСредств(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "GetDebtsToCounterparties" Тогда //получение долги поставщикам
				ПолучитьДолгиПоставщикам(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "GetContactListForSendSms" Тогда //получение список контактов для отправки                                                                                                 
				ПолучитьCписокКонтактовДляОтправки(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка); 
			ИначеЕсли Метод = "getOrganizations" Тогда //получение список контактов для отправки
				ПолучитьСписокОрганизаций(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getRROStatus" Тогда //получение список касс и их статуса
				ПолучитьCтатусRRO(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			ИначеЕсли Метод = "getRRClose" или Метод = "getRROpen" Тогда //открытие кассы
				OpenCloseRRO(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка);
			Иначе 
				Ошибка = "Вызов неизвестного метода - " + Метод;
			КонецЕсли;
		Иначе
			Ошибка = "Неправильный вызов - не указан метод";
		КонецЕсли;
		
		ДанныеСериализации = Новый Структура;
		ДанныеСериализации.Вставить("result", Результат);
		ДанныеСериализации.Вставить("error", Ошибка);
		РезультатJSON = Ответы.СериализоватьВJSON(ДанныеСериализации);
		
		Ответ.УстановитьТелоИзСтроки(РезультатJSON);
		
		Ответ.Заголовки.Вставить("Content-Type","application/json");
	КонецЕсли; 
	
	
	
	
	Возврат Ответ;
КонецФункции

Функция ПечатьGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИнфоОПользователе = АвторизацияWeb1C.СессияАктивна(Запрос, "Печать документов");
	Если ИнфоОПользователе.Успех Тогда		
		//получаем данные
		ДанныеПользователя = ОбщегоНазначенияСайтПовтИсп.ПолучитьДанныеПользователя(ИнфоОПользователе);
		
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаПечати"), Ответ, ДанныеПользователя);
		
		ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
		Результат = "";
		Ошибка = "";
		Если ПараметрыЗапроса.Получить("type") <> Неопределено Тогда
			Тип = ПараметрыЗапроса.Получить("type");
			Если Тип = "test" Тогда
				ПечатьПриемки(ДанныеПользователя, ПараметрыЗапроса, Ответ)
			Иначе 
				Ошибка = "Вызов типа документа на печать - " + Тип;
				
				Ответ.УстановитьТелоИзСтроки(Ошибка);
				Ответ.Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
			КонецЕсли;			
		Иначе
			Ошибка = "Неправильный вызов - не указан метод";
			
			Ответ.УстановитьТелоИзСтроки(Ошибка);
			Ответ.Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Ответ;
КонецФункции

Функция ОтчетыGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	ИнфоОПользователе = АвторизацияWeb1C.СессияАктивна(Запрос, "Страница заказа");
	Если ИнфоОПользователе.Успех Тогда
		ДанныеПользователя = ОбщегоНазначенияСайтПовтИсп.ПолучитьДанныеПользователя(ИнфоОПользователе);
		
		ВходящиеПараметры = Новый Структура("ОбъектАвторизации, Отчет", ДанныеПользователя.ОбъектАвторизации, Неопределено);
		ДанныеПользователя.Вставить("Параметры", ВходящиеПараметры);
		
		//получаем текст страницы
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаОтчетов"), Ответ, ДанныеПользователя);
	Иначе
		//открываем начальную старницу
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаАвторизации"), Ответ, Неопределено);
		УправлениеКуки.CoockieВОтвет(Ответ, "NextURL", Запрос.БазовыйURL + Запрос.ОтносительныйURL, ТекущаяДата() + 60, "/");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ПечатьОтчетаPOST(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	ИнфоОПользователе = АвторизацияWeb1C.СессияАктивна(Запрос, "Страница заказа");
	Если ИнфоОПользователе.Успех Тогда
		ДанныеПользователя = ОбщегоНазначенияСайтПовтИсп.ПолучитьДанныеПользователя(ИнфоОПользователе);
		ТекстОшибки = "";
		ПараметрыЗапроса = Ответы.ПолучитьПараметрыКакСоответствие(Запрос.ПолучитьТелоКакСтроку());
		ИдОтчета = ПараметрыЗапроса.Получить("report_id");
		ТипФайла = 0;
		Пароль = "";
		Если ПараметрыЗапроса.Получить("save_as") = "html" Тогда
			ТипФайла = 0;
		ИначеЕсли ПараметрыЗапроса.Получить("save_as") = "pdf" Тогда
			ТипФайла = 1;
		ИначеЕсли ПараметрыЗапроса.Получить("save_as") = "xls" Тогда
			ТипФайла = 2;
		КонецЕсли;
		Если ПараметрыЗапроса.Получить("password_report") <> Неопределено Тогда
			Пароль = ПараметрыЗапроса.Получить("password_report");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИдОтчета) Тогда
			ТекстОшибки = "Не найден ИД отчета - обратись к разработчикам";
			ДанныеПользователя.Вставить("ТекстОшибки", ТекстОшибки);
			Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаПечатиОтчета"), Ответ, ДанныеПользователя);
			
			Возврат Ответ;
		Иначе
			Отчет = XMLЗначение(Тип("СправочникСсылка.ОтчетыЛичногоКабинета"), ИдОтчета);
			Если Не ЗначениеЗаполнено(Отчет) Тогда
				ТекстОшибки = "Неизвестный Ид отчета - " + ИдОтчета;
				ДанныеПользователя.Вставить("ТекстОшибки", ТекстОшибки);
				Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаПечатиОтчета"), Ответ, ДанныеПользователя);
				
				Возврат Ответ;
			Иначе
				ВходящиеПараметры = Новый Структура("ОбъектАвторизации", ДанныеПользователя.ОбъектАвторизации);
				ДанныеПользователя.Вставить("Параметры", ВходящиеПараметры);
				
				ОтчетОбъект = Отчет.ПолучитьОбъект();
				Если Ложь Тогда
					ОтчетОбъект = Справочники.ОтчетыЛичногоКабинета.СоздатьЭлемент();
				КонецЕсли;
				
				Если Не ПустаяСтрока(ОтчетОбъект.Пароль) Тогда
					Если Пароль <> ОтчетОбъект.Пароль Тогда
						ТекстОшибки = "Указан неверный пароль доступа к отчету";
						ДанныеПользователя.Вставить("ТекстОшибки", ТекстОшибки);
						Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаПечатиОтчета"), Ответ, ДанныеПользователя);
						
						Возврат Ответ;
					КонецЕсли;
				КонецЕсли;
				ПараметрыОтчета = Новый Структура;
				ПараметрыОтчета.Вставить("СсылкаВарианта", ОтчетОбъект.ВариантОтчета);
				ПараметрыОтчета.Вставить("СсылкаОтчета", ОтчетОбъект.ВариантОтчета.Отчет);
				ПараметрыОтчета.Вставить("КлючВарианта", ОтчетОбъект.ВариантОтчета.КлючВарианта);
				ПараметрыОтчета.Вставить("ИдентификаторФормы", Неопределено);
				НастройкиОтчета = ВариантыОтчетов.ПодключитьОтчетИЗагрузитьНастройки(ПараметрыОтчета);
				
				//Установка параметров, полученных в теле запроса
				ПользовательскиеНастройкиКД = НастройкиОтчета.ПользовательскиеНастройкиКд;
				Для каждого ТекПараметр Из ПараметрыЗапроса Цикл
					СтрокаПараметров = ОтчетОбъект.ПараметрыОтчета.Найти(ТекПараметр.Ключ, "Идентификатор");
					Если СтрокаПараметров <> Неопределено Тогда
						ЗначениеПараметра = Неопределено;
						Если СтрокаПараметров.Тип = Перечисления.ДоступныеТипыПолейДляЛК.Строка Тогда
							ЗначениеПараметра = ТекПараметр.Значение;
						ИначеЕсли СтрокаПараметров.Тип = Перечисления.ДоступныеТипыПолейДляЛК.Число Тогда
							ОТ = Новый ОписаниеТипов("Число");
							ЗначениеПараметра = ОТ.ПривестиЗначение(ТекПараметр.Значение);
						ИначеЕсли СтрокаПараметров.Тип = Перечисления.ДоступныеТипыПолейДляЛК.Дата Тогда
							ЗначениеДата = СтрЗаменить(ТекПараметр.Значение, "-", "") + "000000";
							ОТ = Новый ОписаниеТипов("Дата");
							ЗначениеПараметра = ОТ.ПривестиЗначение(ЗначениеДата);
					ИначеЕсли СтрокаПараметров.Тип = Перечисления.ДоступныеТипыПолейДляЛК.Булево Тогда
							ОТ = Новый ОписаниеТипов("Булево");
							ЗначениеПараметра = ОТ.ПривестиЗначение(ТекПараметр.Значение);
						КонецЕсли;
						Для каждого ПользовательскаяНастройкаКД Из ПользовательскиеНастройкиКД.Элементы Цикл
							Если ПользовательскаяНастройкаКД.ИдентификаторПользовательскойНастройки = ТекПараметр.Ключ Тогда
								ПользовательскаяНастройкаКД.Значение = ЗначениеПараметра;
							КонецЕсли;
						КонецЦикла;
						//НастройкиОтчета.НастройкиКД.ПараметрыДанных.УстановитьЗначениеПараметра(СтрокаПараметров.ИмяПараметра, ЗначениеПараметра);
					КонецЕсли;
				КонецЦикла;
				
				//установка внутренних параметров
				Для каждого ТекПараметр Из ОтчетОбъект.ПараметрыОтчета Цикл
					Если ТекПараметр.ВариантЗаполнения = Перечисления.ВариантыЗаполнениеОтчетовЛК.ВнутреннийПараметр Тогда
						Если ТекПараметр.ВнутреннийПараметр = Перечисления.ВнутренниеПараметрыОтчетов.ОбъектАвторизации Тогда
							Для каждого ПользовательскаяНастройкаКД Из ПользовательскиеНастройкиКД.Элементы Цикл
								Если ПользовательскаяНастройкаКД.ИдентификаторПользовательскойНастройки = ТекПараметр.Идентификатор Тогда
									ПользовательскаяНастройкаКД.Значение = ДанныеПользователя.ОбъектАвторизации;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ЗагрузитьНастройки(НастройкиОтчета.Объект.КомпоновщикНастроек, НастройкиОтчета.НастройкиКД, НастройкиОтчета.ПользовательскиеНастройкиКД);
				ПараметрыФормирования = Новый Структура;
				ПараметрыФормирования.Вставить("Подключение", НастройкиОтчета);
				Формирование = ВариантыОтчетов.СформироватьОтчет(НастройкиОтчета, Истина, Истина);
				Если Формирование.Успех Тогда
					ТабДок = Формирование.ТабличныйДокумент;
					
					Если ТипФайла = 1 Тогда
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
						ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.PDF);
						ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
						
						Ответ.УстановитьТелоИзДвоичныхДанных(ДД);
						Ответ.Заголовки.Вставить("Content-Type","application/pdf");
						Ответ.Заголовки.Вставить("Content-Disposition", СтрШаблон("attachment; filename=report%1.pdf", Формат(ТекущаяДата(), "ДФ=dd_MM_yy")));
						
					ИначеЕсли ТипФайла = 2 Тогда
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xls");
						ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.XLS);
						ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
						
						Ответ.УстановитьТелоИзДвоичныхДанных(ДД);
						Ответ.Заголовки.Вставить("Content-Type","application/vnd.ms-excel");
						Ответ.Заголовки.Вставить("Content-Disposition",СтрШаблон("attachment; filename=report%1.xls", Формат(ТекущаяДата(), "ДФ=dd_MM_yy")));
						
					Иначе
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
						ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.HTML5);
						ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
						
						Ответ.УстановитьТелоИзДвоичныхДанных(ДД);
						Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
					КонецЕсли;
				Иначе
					ДанныеПользователя.Вставить("ТекстОшибки", Формирование.ТекстОшибки);
					Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаПечатиОтчета"), Ответ, ДанныеПользователя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		//открываем начальную старницу
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.Страница404"), Ответ, Неопределено);
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция АктДиганостикиGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	ИнфоОПользователе = АвторизацияWeb1C.СессияАктивна(Запрос, "Акт диагностики");
	Если ИнфоОПользователе.Успех Тогда
		ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
		Если ПараметрыЗапроса.Получить("id") <> Неопределено Тогда
			Идентификатор = ПараметрыЗапроса.Получить("id");
			
			//открываем форму списка
			ДанныеПользователя = ОбщегоНазначенияСайтПовтИсп.ПолучитьДанныеПользователя(ИнфоОПользователе);
			
			АктДиагностики = ВыборкаДанныхСайтСервер.ПолучитьАктДиагностикиПоИдентификатору(Идентификатор);
			ВходящиеПараметры = Новый Структура;
			ВходящиеПараметры.Вставить("ОбъектАвторизации", ДанныеПользователя.ОбъектАвторизации);
			ВходящиеПараметры.Вставить("Пользователь", ДанныеПользователя.Пользователь);
			ВходящиеПараметры.Вставить("АктДиагностики", АктДиагностики);
			ДанныеПользователя.Вставить("Параметры", ВходящиеПараметры);
			
			//получаем текст страницы
			Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаАктаДиагностики"), Ответ, ДанныеПользователя);
		Иначе
			//получаем текст страницы
			Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.Страница404"), Ответ, Неопределено);
		КонецЕсли;
	Иначе
		//открываем начальную старницу
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаАвторизации"), Ответ, Неопределено);
		УправлениеКуки.CoockieВОтвет(Ответ, "NextURL", Запрос.БазовыйURL + Запрос.ОтносительныйURL, ТекущаяДата() + 60, "/");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция СозданиеЗаписиКалендаряGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	ИнфоОПользователе = АвторизацияWeb1C.СессияАктивна(Запрос, "Акт диагностики");
	Если ИнфоОПользователе.Успех Тогда
		ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
		
		//открываем форму списка
		ДанныеПользователя = ОбщегоНазначенияСайтПовтИсп.ПолучитьДанныеПользователя(ИнфоОПользователе);
		
		ВходящиеПараметры = Новый Структура;
		ДанныеПользователя.Вставить("Параметры", ВходящиеПараметры);
		
		//получаем текст страницы
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаЗаписиКалендаря"), Ответ, ДанныеПользователя);
	Иначе
		//открываем начальную старницу
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаАвторизации"), Ответ, Неопределено);
		УправлениеКуки.CoockieВОтвет(Ответ, "NextURL", Запрос.БазовыйURL + Запрос.ОтносительныйURL, ТекущаяДата() + 60, "/");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция КалендарьGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	ИнфоОПользователе = АвторизацияWeb1C.СессияАктивна(Запрос, "Календарь");
	Если ИнфоОПользователе.Успех Тогда
		ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
		
		//открываем форму списка
		ДанныеПользователя = ОбщегоНазначенияСайтПовтИсп.ПолучитьДанныеПользователя(ИнфоОПользователе);
		
		Филиал = "Подразделение";
		ВходящиеПараметры = Новый Структура;
		ДанныеПользователя.Вставить("Параметры", ВходящиеПараметры);
		ПрочиеПараметры = Новый Структура;
		ПрочиеПараметры.Вставить("Филиал", Филиал);
		ДанныеПользователя.Вставить("ПрочиеПараметры", ПрочиеПараметры);
		
		//получаем текст страницы
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаКалендаря"), Ответ, ДанныеПользователя);
	Иначе
		//открываем начальную старницу
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаАвторизации"), Ответ, Неопределено);
		УправлениеКуки.CoockieВОтвет(Ответ, "NextURL", Запрос.БазовыйURL + Запрос.ОтносительныйURL, ТекущаяДата() + 60, "/");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция СтраницаИсторииОбслуживания(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
	
	//открываем форму списка
	ДанныеПользователя = ОбщегоНазначенияСайтПовтИсп.ПолучитьПустуюСтруктуруДанныхПользователя();
	
	ВходящиеПараметры = Новый Структура;
	ВходящиеПараметры.Вставить("Токен", Запрос.ПараметрыЗапроса.Получить("token"));
	ДанныеПользователя.Вставить("Параметры", ВходящиеПараметры);
	
	//получаем текст страницы
	Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаИсторииОбслуживания"), Ответ, ДанныеПользователя);
	
	Возврат Ответ;
КонецФункции

Функция Auth(Запрос) Экспорт
	//при POST-запросе надо указать серверу, чтобы ушел редирект на  Location
	//необходимо дабы при обновлении страницы не происходила повторная отправка запроса
	//Запрос.
	Ответ = Новый HTTPСервисОтвет(200);
	
	
	АвторизацияWeb1C.Авторизация(Запрос, Ответ);
	
	Возврат Ответ;
КонецФункции



/////////////////////API///////////////////////
Функция ПолучитьСоединение()
	Соединение = Справочники.НастройкиAPI.ПолучитьСоединение(Перечисления.СервисыAPI.СлужбаДоставки);
	Возврат Соединение;
КонецФункции

Функция ПолучитьHTTPЗапрос(АдресРесурса, СтрокаПараметровЗапроса, ДобавитьПараметрыВТелоЗапроса = Ложь)
	HTTPЗапрос = Справочники.НастройкиAPI.ПолучитьHTTPЗапросПоимениМетода(Перечисления.СервисыAPI.СлужбаДоставки, АдресРесурса, СтрокаПараметровЗапроса, ДобавитьПараметрыВТелоЗапроса);
	
	Возврат HTTPЗапрос;
КонецФункции




Процедура ИзменитьАктДиагностики(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	Если ПараметрыЗапроса.Свойство("id_doc")Тогда
		Идентификатор = ПараметрыЗапроса["id_doc"];
		АктДиагностики = ВыборкаДанныхСайтСервер.ПолучитьАктДиагностикиПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(АктДиагностики) Тогда
			АктОбъект = АктДиагностики.ПолучитьОбъект();
			ПараметрыАкта = ПараметрыЗапроса;
			АктОбъект.ВсеДанные = Ответы.СериализоватьВJSON(ПараметрыАкта);
		//	АктОбъект.ТормознойДискПеред = ПараметрыАкта.t_d_p;
		//	АктОбъект.ТормознойДискЗад = ПараметрыАкта.t_d_z;
		//	АктОбъект.ТормознаяКолодкаПеред = ПараметрыАкта.t_k_p;
		//	АктОбъект.ТормознаяКолодкаЗад = ПараметрыАкта.t_k_z;
		//	
		//
		//	
		//	АктОбъект.ТормознойДискПередКомментарий = ПараметрыАкта.t_d_p_comment;
		//	АктОбъект.ТормознойДискЗадКомментарий = ПараметрыАкта.t_d_z_comment;
		//	АктОбъект.ТормознаяКолодкаПередКомментарий = ПараметрыАкта.t_k_p_comment;
		//	АктОбъект.ТормознаяКолодкаЗадКомментарий = ПараметрыАкта.t_k_z_comment;
			
			//для булевых типов надо делать проверку на сущестование
			//АктОбъект.ТормознаяЖидкостьПроверка = Не ПараметрыАкта.Свойство("t_zh");
			//АктОбъект.ТормознаяЖидкостьКомментарий = ПараметрыАкта.t_zh_comment;
			
			АктОбъект.ТормознойДискПеред = ПараметрыАкта.DpI11;
			АктОбъект.ТормознойДискПередКомментарий = ПараметрыАкта.DpC11;
			АктОбъект.ТормознойДискЗад = ПараметрыАкта.DzI12;
			АктОбъект.ТормознойДискЗадКомментарий = ПараметрыАкта.DzC12;
			АктОбъект.ТормознаяКолодкаПеред = ПараметрыАкта.KpI13;
			АктОбъект.ТормознаяКолодкаПередКомментарий = ПараметрыАкта.KpC13;
			АктОбъект.ТормознаяКолодкаЗад = ПараметрыАкта.KzI14;
			АктОбъект.ТормознаяКолодкаЗадКомментарий = ПараметрыАкта.KzC14;
			АктОбъект.ТормознаяЖидкостьПроверка = не ПараметрыАкта.Свойство("TzCb15");
			АктОбъект.ТормознаяЖидкостьКомментарий = ПараметрыАкта.TzC15;
			
			
			АктОбъект.СвечиЗажиганияСостояниеЧекБокс = не ПараметрыАкта.Свойство("SzCL21");
			//АктОбъект.СвечиЗажиганияСостояниеЧекБокс = Не ПараметрыАкта.Свойство("SzCbR21");
			АктОбъект.СвечиЗажиганияСостояниеКоммент = ПараметрыАкта.SzC21;
			АктОбъект.МаслоДвсЧекБокс = не ПараметрыАкта.Свойство("MDvsCb22");
			АктОбъект.МаслоДвсКоммент = ПараметрыАкта.MdvsC22;
			АктОбъект.СостояниеРадиаторовЧекБокс = не ПараметрыАкта.Свойство("SrCb23");
			АктОбъект.СостояниеРадиаторовКоммент = ПараметрыАкта.SrC23;
			АктОбъект.АнтифризЧекБокс = не ПараметрыАкта.Свойство("ACb24");
			АктОбъект.АнтифризЧекКоммент = ПараметрыАкта.AC24;
			АктОбъект.ЖидкостьГуЧекБокс = не ПараметрыАкта.Свойство("GguCb25");
			АктОбъект.ЖидкостьГуКоммент = ПараметрыАкта.GguC25;
			АктОбъект.МаслоАкппЧекБокс = Не ПараметрыАкта.Свойство("MakppCb26");
			АктОбъект.МаслоАкппКоммент = ПараметрыАкта.MakppC26;
			
			АктОбъект.АмортизаторПружинаЧекБолсЛ = Не ПараметрыАкта.Свойство("ApCbL31");
			АктОбъект.АмортизаторПружинаЧекБолсП = Не ПараметрыАкта.Свойство("ApCbR31");
			//31ApC
			АктОбъект.ОпораАмортизатораЧекБоксЛ = Не ПараметрыАкта.Свойство("OaCb32");
			АктОбъект.ОпораАмортизатораКоммент = ПараметрыАкта.OaC32;
			АктОбъект.ПыльникОтбойникАмортизатораЧекБоксПоЛ = Не ПараметрыАкта.Свойство("PoCbL33");
			//33PoCbR
			АктОбъект.ПыльникОтбойникАмортизатораПоКоммент = ПараметрыАкта.PoC33;
			АктОбъект.РычагВерхПоЧекБоксЛ = Не ПараметрыАкта.Свойство("RvCb34");
			АктОбъект.РычагВерхПоКоммент = ПараметрыАкта.RvC34;
			АктОбъект.РычагНизПоЧекБоксЛ = Не ПараметрыАкта.Свойство("RnCb35");
			АктОбъект.РычагНизПоКоммент = ПараметрыАкта.RnC35;
			АктОбъект.СайлентблокПоЧекБоксЛ = Не ПараметрыАкта.Свойство("SCb36");
			АктОбъект.СайлентблокПоКоммент = ПараметрыАкта.SC36;
			АктОбъект.ВтулкиСтабилизатораПоЧекБоксЛ = Не ПараметрыАкта.Свойство("VsCb37");
			АктОбъект.ВтулкиСтабилизатораПоКоммент = ПараметрыАкта.VsC37;
			АктОбъект.СтойкаСтабилизатораПоЧекБоксЛ = Не ПараметрыАкта.Свойство("SsCb38");
			АктОбъект.СтойкаСтабилизатораПоКоммент = ПараметрыАкта.SsC38;
			АктОбъект.РулеваяРейкаЧекБокс = Не ПараметрыАкта.Свойство("RrCb39");
			АктОбъект.РулеваяРейкаКоммент = ПараметрыАкта.RrC39;
			АктОбъект.РулеваяТягаНаконечникЧекБоксЛ = Не ПараметрыАкта.Свойство("RtCbL310");
			АктОбъект.РулеваяТягаНаконечникЧекБоксП = Не ПараметрыАкта.Свойство("RtCbR310");
			АктОбъект.РулеваяТягаНаконечникКоммент = ПараметрыАкта.RtC310;
			АктОбъект.ПодшипникСтупицыЧекБокс = Не ПараметрыАкта.Свойство("PsCb311");
			АктОбъект.ПодшипникСтупицыКоммент = ПараметрыАкта.PsC311;
			АктОбъект.КрепленияДвсЧекБокс = Не ПараметрыАкта.Свойство("KdvsCb312");
			АктОбъект.КрепленияДвсКоммент = ПараметрыАкта.KdvsC312;
			АктОбъект.КрепленияКппЧекБокс = Не ПараметрыАкта.Свойство("KkppCb313");
			АктОбъект.КрепленияКппКоммент = ПараметрыАкта.KkppC313;
			АктОбъект.ПыльникШрусаШрусЧекБоксЛ = Не ПараметрыАкта.Свойство("PsCbL314");
			АктОбъект.ПыльникШрусаШрусЧекБоксП = Не ПараметрыАкта.Свойство("PsCbR314");
			АктОбъект.ПыльникШрусаШрусКоммент = ПараметрыАкта.PsC314;
			АктОбъект.ПоддонДвсЧекБокс = Не ПараметрыАкта.Свойство("PdvsCb315");
			АктОбъект.ПоддонДвсКоммент = ПараметрыАкта.PdvsC315;
			АктОбъект.ПоддонАкппЧекБокс = Не ПараметрыАкта.Свойство("PakppCb316");
			АктОбъект.ПоддонАкппКоммент = ПараметрыАкта.PakppC316;
			
			АктОбъект.ЗадняяОсьАмортизаторПружинаЧекБоксЛ = Не ПараметрыАкта.Свойство("ApCbL41");
			АктОбъект.ЗадняяОсьАмортизаторПружинаЧекБоксП = Не ПараметрыАкта.Свойство("ApCbR41");
			АктОбъект.ЗадняяОсьАмортизаторПружинаКоммент = ПараметрыАкта.ApC41;
			АктОбъект.ЗадняяОсьОпораАмортизатораЧекБоксЛ = Не ПараметрыАкта.Свойство("OaCb42");
			АктОбъект.ЗадняяОсьОпораАмортизатораКоммент = ПараметрыАкта.OaC42;
			АктОбъект.ЗадняяОсьПыльникОтбойникАмортизатораЧекБоксЛ = Не ПараметрыАкта.Свойство("PoaCbL43");
			АктОбъект.ЗадняяОсьПыльникОтбойникАмортизатораЧекБоксП = Не ПараметрыАкта.Свойство("PoaCbR43");
			АктОбъект.ЗадняяОсьПыльникОтбойникАмортизатораКоммент = ПараметрыАкта.PoaC43;
			АктОбъект.ЗадняяОсьЭластичнаяМуфтаЧекБокс = Не ПараметрыАкта.Свойство("EmCb44");
			АктОбъект.ЗадняяОсьЭластичнаяМуфтаКоммент = ПараметрыАкта.EmC44;
			АктОбъект.ЗадняяОсьСайлентблокиЧекБокс = Не ПараметрыАкта.Свойство("SCb45");
			АктОбъект.ЗадняяОсьСайлентблокиКоммент = ПараметрыАкта.SC45;
			АктОбъект.ЗадняяОсьРычагиЧекБокс = Не ПараметрыАкта.Свойство("RCb46");
			АктОбъект.ЗадняяОсьРычагиКоммент = ПараметрыАкта.RC46;
			АктОбъект.ЗадняяОсьВтулкаСтабилизатораЧекБокс = Не ПараметрыАкта.Свойство("VsCb47");
			АктОбъект.ЗадняяОсьВтулкаСтабилизатораКоммент = ПараметрыАкта.VsC47;
			АктОбъект.ЗадняяОсьСтойкаСтабилизатораЧекБокс = Не ПараметрыАкта.Свойство("SsCb48");
			АктОбъект.ЗадняяОсьСтойкаСтабилизатораКоммент = ПараметрыАкта.SsC48;

			
			Если ПараметрыАкта.Свойство("finish") ТОгда
				АктОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				АктОбъект.Записать();
			КонецЕсли;
			
			//фиксация данные по авто
			VIN = Справочники.ERP_STO_ПоказателиДопДанныхОбАвтомобилях.НайтиПоНаименованию("VIN Код");
			Пробег = Справочники.ERP_STO_ПоказателиДопДанныхОбАвтомобилях.НайтиПоНаименованию("Пробег");
			ГосНомер = Справочники.ERP_STO_ПоказателиДопДанныхОбАвтомобилях.НайтиПоНаименованию("Гос. номер");
			
			//VIN
			МЗ = РегистрыСведений.ERP_STO_ДополнительныеДанныеОбАвтомобилях.СоздатьМенеджерЗаписи();
			МЗ.Автомобиль = АктОбъект.Автомобиль;
			МЗ.Показатель = VIN;
			МЗ.ЗначениеПоказателя = ПараметрыАкта.vin;
			МЗ.Записать();
			
			//пробег
			МЗ = РегистрыСведений.ERP_STO_ДополнительныеДанныеОбАвтомобилях.СоздатьМенеджерЗаписи();
			МЗ.Автомобиль = АктОбъект.Автомобиль;
			МЗ.Показатель = Пробег;
			МЗ.ЗначениеПоказателя = ПараметрыАкта.probeg;
			МЗ.Записать();
			
			//гос. номер
			МЗ = РегистрыСведений.ERP_STO_ДополнительныеДанныеОбАвтомобилях.СоздатьМенеджерЗаписи();
			МЗ.Автомобиль = АктОбъект.Автомобиль;
			МЗ.Показатель = ГосНомер;
			МЗ.ЗначениеПоказателя = ПараметрыАкта.gosnomer;
			МЗ.Записать();
		Иначе
			Результат = "";
			Ошибка = "Не найден дашборд по идентификатору - " + Идентификатор;
		КонецЕсли;
	Иначе
		Результат = "";
		Ошибка = "Ошибка при передаче идентификатора документа - нет идентификатора";
	КонецЕсли;
КонецПроцедуры

//вспомагательные методы
Процедура ПолучитьПараметрыОтчета(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	Если ПараметрыЗапроса.Свойство("id_report")Тогда
		ИД_отчета = ПараметрыЗапроса["id_report"];
		ИДБлока = ПараметрыЗапроса["block"];
		Отчет = XMLЗначение(Тип("СправочникСсылка.ОтчетыЛичногоКабинета"), ИД_отчета);
		Если ЗначениеЗаполнено(Отчет) Тогда
			МакетБлока = ВыборкаДанныхСайтСервер.ПолучитьМакетБлокаПоИД(ИДБлока);
			Если Не МакетБлока.Пустая() Тогда
				Результат = МакетБлока.ПолучитьОбъект().ПолучитьТекстМакета(Новый Структура("ОбъектАвторизации, Отчет", ДанныеПользователя.ОбъектАвторизации, Отчет));
			Иначе
				Ошибка = "Ошибка с поиском макета блока страницы";
			КонецЕсли;
		Иначе
			Ошибка = "Не найден отчет по ИД - " + ИД_отчета;
		КонецЕсли;
	Иначе
		Ошибка = "Ошибка при передаче ИД отчета - нет ИД";
	КонецЕсли;
КонецПроцедуры



/////////////////////ПЕЧАТЬ///////////////////////
Процедура ПечатьПриемки(ДанныеПользователя, ПараметрыЗапроса, Ответ)
	//Если ПараметрыЗапроса.Получить("id_doc") <> Неопределено Тогда
	//	ИД = ПараметрыЗапроса.Получить("id_doc");
	//	ОснованиеПриемки = ВыборкаДанныхСайтСервер.ПолучитьОснованиеПриемки(ИД);
	//	Если Не ОснованиеПриемки.Пустая() Тогда
	//		ТабДок = Документы.ПеремещениеЗаказов.СформироватьАктПриемаПередачиНаКурьера(ОснованиеПриемки, Новый СписокЗначений);
	//		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
	//		ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.HTML5);
	//		ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
	//		
	//		Ответ.УстановитьТелоИзДвоичныхДанных(ДД);
	//		//Ответ.Заголовки.Вставить("Content-Type","application/pdf");
	//		Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//	Иначе
	//		Ошибка = "Невозможно напечатать документ с ИД - " + ИД + "!";
	//		
	//		Ответ.УстановитьТелоИзСтроки(Ответы.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//		Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//	КонецЕсли;
	//Иначе
	//	Ошибка = "Ошибка при передаче идентификатора акта приема-передачи - нет идентификатора";
	//	
	//	Ответ.УстановитьТелоИзСтроки(Ответы.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//	Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//КонецЕсли;
	//
	//Ответ.Заголовки.Вставить("Title", "Печать приемки");
КонецПроцедуры

Процедура ПечатьЭтикеткиЗаказа(ДанныеПользователя, ПараметрыЗапроса, Ответ) Экспорт 
	//Если ПараметрыЗапроса.Получить("id") <> Неопределено Тогда
	//	Ид = ПараметрыЗапроса.Получить("id");
	//	Заказ = ВыборкаДанныхСайтСервер.ПолучитьЗаказПоИД(Ид);
	//	Если Не Заказ.Пустая() Тогда
	//		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Поклажедатель") = ДанныеПользователя.Контрагент Тогда
	//			МассивОбъектов = Новый Массив; 
	//			МассивОбъектов.Добавить(Заказ);
	//			ОбъектыПечати = Новый СписокЗначений;
	//			ПараметрыПечати = Неопределено;
	//			ТабДок = Документы.ЗаказКлиента.СформироватьЭтикеткуЗаказа(МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
	//			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
	//			ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.HTML5);
	//			ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
	//			
	//			Ответ.УстановитьТелоИзДвоичныхДанных(ДД);
	//			//Ответ.Заголовки.Вставить("Content-Type","application/pdf");
	//			Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//		Иначе
	//			Ошибка = СтрШаблон("Заказ с ИД %1 не принадлежит %2!", ИД);
	//			
	//			Ответ.УстановитьТелоИзСтроки(Ответы.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//			Ответ.Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
	//		КонецЕсли;
	//	Иначе
	//		Ошибка = СтрШаблон("Не найден заказ с ИД - %1!", ИД, ДанныеПользователя.ДанныеКонтрагента.Контрагент);
	//		
	//		Ответ.УстановитьТелоИзСтроки(Ответы.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//		Ответ.Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
	//	КонецЕсли;
	//Иначе
	//	Ошибка = "Ошибка при передаче идентификатора заказа - нет идентификатора";
	//	
	//	Ответ.УстановитьТелоИзСтроки(Ответы.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//	Ответ.Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
	//КонецЕсли;
КонецПроцедуры

Процедура ПечатьприходнойНакладной(ДанныеПользователя, ПараметрыЗапроса, Ответ)
	//Если ПараметрыЗапроса.Получить("id") <> Неопределено Тогда
	//	ИД = ПараметрыЗапроса.Получить("id");
	//	Закупка = ВыборкаДанныхСайтСервер.ПолучитьЗакупкуПоИД(ИД);
	//	Если Не Закупка.Пустая() Тогда
	//		МассивОбъектов = Новый Массив;
	//		МассивОбъектов.Добавить(Закупка);
	//		ТабДок = Документы.ПриобретениеТоваровУслуг.СформироватьПечатнуюФормуПриходнаяНакладная(МассивОбъектов, Новый СписокЗначений);
	//		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
	//		ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.HTML5);
	//		ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
	//		
	//		Ответ.УстановитьТелоИзДвоичныхДанных(ДД);
	//		//Ответ.Заголовки.Вставить("Content-Type","application/pdf");
	//		Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//	Иначе
	//		Ошибка = "Невозможно напечатать документ с ИД - " + ИД + "!";
	//		
	//		Ответ.УстановитьТелоИзСтроки(Ответы.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//		Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//	КонецЕсли;
	//Иначе
	//	Ошибка = "Ошибка при передаче идентификатора акта приема-передачи - нет идентификатора";
	//	
	//	Ответ.УстановитьТелоИзСтроки(Ответы.ПолучитьHTMLПредставлениеОшибки(Ошибка));
	//	Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	//КонецЕсли;
	//
	//Ответ.Заголовки.Вставить("Title", "Печать приемки");
КонецПроцедуры

// Загружает новые настройки в компоновщик без сброса пользовательских настроек.
//
// Параметры:
//   КомпоновщикНастроекКД - КомпоновщикНастроекКомпоновкиДанных - Куда надо загрузить настройки.
//   НастройкиКД - НастройкиКомпоновкиДанных - Загружаемые настройки варианта.
//   ПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено - Необязательный.
//       Загружаемые пользовательские настройки. Если не указан, то пользовательские настройки не загружаются.
//
Функция ЗагрузитьНастройки(КомпоновщикНастроекКД, НастройкиКД, ПользовательскиеНастройкиКД = Неопределено) Экспорт
	НастройкиЗагружены = (ТипЗнч(НастройкиКД) = Тип("НастройкиКомпоновкиДанных") И НастройкиКД <> КомпоновщикНастроекКД.Настройки);
	Если НастройкиЗагружены Тогда
		Если ТипЗнч(ПользовательскиеНастройкиКД) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
			ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
		КонецЕсли;
		КомпоновщикНастроекКД.ЗагрузитьНастройки(НастройкиКД);
	КонецЕсли;
	Если ТипЗнч(ПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных")
		И ПользовательскиеНастройкиКД <> КомпоновщикНастроекКД.ПользовательскиеНастройки Тогда
		КомпоновщикНастроекКД.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройкиКД);
	КонецЕсли;
	Возврат НастройкиЗагружены;
КонецФункции
/////////////////////ПЕЧАТЬ///////////////////////


//==============чтение файла из multi part form data===============
&НаСервере
Функция ПрочитатьСообщениеСФайлами(заголовки, тело)
	Результат = Новый Массив;
	
	Разделитель = ПолучитьРазделительСоставногоСообщения(заголовки);
	Маркеры = Новый Массив();
	Маркеры.Добавить(Разделитель);
	Маркеры.Добавить(Разделитель + Символы.ПС);
	Маркеры.Добавить(Разделитель + Символы.ВК);
	Маркеры.Добавить(Разделитель + Символы.ВК + Символы.ПС);
	Маркеры.Добавить(Разделитель + "--");
	Текст = Неопределено;
	Файл = Неопределено;
	
	ЧтениеДанных = Новый ЧтениеДанных(Тело);
	// Переходим к началу первой части
	ЧтениеДанных.ПропуститьДо(Маркеры);
	// Далее в цикле читаем все части
	Пока Истина Цикл
		Часть = чтениеДанных.ПрочитатьДо(Маркеры);
		Если Не Часть.МаркерНайден Тогда
			// Неправильно сформированное сообщение
			Прервать;
		КонецЕсли;
		ЧтениеЧасти = Новый ЧтениеДанных(Часть.ОткрытьПотокДляЧтения());
		ЗаголовкиЧасти = ПрочитатьЗаголовки(ЧтениеЧасти);
		ИмяЧасти = ПолучитьИмяСообщения(ЗаголовкиЧасти);
		Если ИмяЧасти <> Неопределено Тогда
			Файл = ЧтениеЧасти.Прочитать().ПолучитьДвоичныеДанные();
			
			Результат.Добавить(Новый Структура("ИмяФайла, Файл", ИмяЧасти, Файл));
		КонецЕсли;
		
		Если Часть.ИндексМаркера = 4 Тогда
			// Прочитали последнюю часть
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат; 
КонецФункции

&НаСервере
Функция ПрочитатьЗаголовки(Чтение)
	Заголовки = Новый Соответствие();
	Пока Истина Цикл
		Стр = Чтение.ПрочитатьСтроку();
		Если Стр = "" Тогда
			Прервать;
		КонецЕсли;
		Части = СтрРазделить(Стр, ":");
		ИмяЗаголовка = СокрЛП(Части[0]);
		Значение = СокрЛП(Части[1]);
		Заголовки.Вставить(ИмяЗаголовка, Значение);
	КонецЦикла;
	Возврат Заголовки;
КонецФункции

// Поиск строки-разделителя составного сообщения из заголовков
// Предполагается, что значение разделителя задается в заголовке
// Content-Type в следующем виде:
// Content-Type: multipart/form-data; boundary=<Разделитель>
&НаСервере
Функция ПолучитьРазделительСоставногоСообщения(Заголовки)
	ТипСодержимого = Заголовки.Получить("Content-Type");
	Свойства = СтрРазделить(ТипСодержимого, ";", Ложь);
	Граница = Неопределено;
	Для Каждого Свойство Из Свойства Цикл
		Части = СтрРазделить(Свойство, "=", Ложь);
		ИмяСвойства = СокрЛП(Части[0]);
		Если ИмяСвойства <> "boundary" Тогда
			Продолжить;
		КонецЕсли;
		Граница = СокрЛП(Части[1]);
		Прервать;
	КонецЦикла;
	Возврат Граница;
КонецФункции

// Имя сообщения получается из заголовка
// Content-Disposition
// Content-Disposition: form-data; name=<Имя сообщения>
&НаСервере
Функция ПолучитьИмяСообщения(Заголовки)
	Описание = Заголовки.Получить("Content-Disposition");
	Свойства = СтрРазделить(Описание, ";", Ложь);
	Имя = Неопределено;
	Для Каждого Свойство Из Свойства Цикл
		Части = СтрРазделить(Свойство, "=", Ложь);
		ИмяСвойства = СокрЛП(Части[0]);
		Если ИмяСвойства <> "filename" Тогда
			Продолжить;
		КонецЕсли;
		Имя = СтрЗаменить(СокрЛП(Части[1]), """", "");
		Прервать;
	КонецЦикла;
	Возврат Имя;
КонецФункции
//==============чтение файла из multi part form data===============




//==============СТО===============

// Функция забирает сообщения пользователю 
// выведенные через Сообщить
// Описание:
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
Функция ПолучитьВыведенныеСообщенияПользователю()
	Результат = "";
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	Для каждого ТекСообщение Из Сообщения Цикл
		Результат = Результат + ТекСообщение.Текст + Символы.ПС;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ПолучитьФилиалы(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСТО.ТаблицаПостов КАК ТаблицаПостов,
	|	НастройкиСТО.ТаблицаФилиалов КАК ТаблицаФилиалов
	|ИЗ
	|	РегистрСведений.НастройкиСТО КАК НастройкиСТО
	|ГДЕ
	|	НастройкиСТО.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиСТО.ТаблицаПостов,
	|	НастройкиСТО.ТаблицаФилиалов
	|ИЗ
	|	РегистрСведений.НастройкиСТО КАК НастройкиСТО
	|ГДЕ
	|	НастройкиСТО.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Организация", ДанныеПользователя.Организация);
	РезультатЗапрос = Запрос.Выполнить();
	Если РезультатЗапрос.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапрос.Выбрать();
	Выборка.Следующий();
	ТаблицаФилиалов = Выборка.ТаблицаФилиалов.Получить();
	
	МассивДанных = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаФилиалов Цикл
		Если ТекСтрока.Пользователь = ДанныеПользователя.ПользовательСправочник Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Наименование", Строка(ТекСтрока.Подразделение));
			СтруктураДанных.Вставить("Ссылка", XMLСтрока(ТекСтрока.Подразделение));
			МассивДанных.Добавить(СтруктураДанных);
		КонецЕсли;
	КонецЦикла;
	
	
	Результат = Ответы.СериализоватьВJSON(МассивДанных, Ложь);
КонецПроцедуры

Процедура ПолучитьПосты(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСТО.ТаблицаПостов КАК ТаблицаПостов,
	|	НастройкиСТО.ТаблицаФилиалов КАК ТаблицаФилиалов
	|ИЗ
	|	РегистрСведений.НастройкиСТО КАК НастройкиСТО
	|ГДЕ
	|	НастройкиСТО.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиСТО.ТаблицаПостов,
	|	НастройкиСТО.ТаблицаФилиалов
	|ИЗ
	|	РегистрСведений.НастройкиСТО КАК НастройкиСТО
	|ГДЕ
	|	НастройкиСТО.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Организация", ДанныеПользователя.Организация);
	РезультатЗапрос = Запрос.Выполнить();
	Если РезультатЗапрос.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапрос.Выбрать();
	Выборка.Следующий();
	ТаблицаПостов = Выборка.ТаблицаПостов.Получить();
	
	МассивДанных = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаПостов Цикл
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Наименование", Строка(ТекСтрока.Пост));
		СтруктураДанных.Вставить("Ссылка", XMLСтрока(ТекСтрока.Пост));
		СтруктураДанных.Вставить("Филиал", XMLСтрока(ТекСтрока.Филиал));
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	
	
	Результат = Ответы.СериализоватьВJSON(МассивДанных, Ложь);
КонецПроцедуры

Процедура ПолучитьКлиентов(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт
    ФильтрТелефона = ПараметрыЗапроса["ФильтрТелефона"];

    Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	ПартнерыКонтактнаяИнформация.Ссылка КАК Клиент,
|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
|	ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
|	ERP_STO_Автомобили.Наименование КАК Наименование
|ИЗ
|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ERP_STO_Автомобили КАК ERP_STO_Автомобили
|		ПО (ERP_STO_Автомобили.Владелец = ПартнерыКонтактнаяИнформация.Ссылка)
|ГДЕ
|	ПартнерыКонтактнаяИнформация.НомерТелефона <> """"
|	И ПартнерыКонтактнаяИнформация.Ссылка.Клиент
|	И НЕ ПартнерыКонтактнаяИнформация.Ссылка.ПометкаУдаления
|
|СГРУППИРОВАТЬ ПО
|	ПартнерыКонтактнаяИнформация.Ссылка,
|	ПартнерыКонтактнаяИнформация.НомерТелефона,
|	ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов,
|	ERP_STO_Автомобили.Наименование";

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    МассивДанных = Новый Массив;

    Пока Выборка.Следующий() Цикл
        Если СтрНайти(Выборка.НомерТелефона, ФильтрТелефона) = 0 Тогда
            Продолжить;
        КонецЕсли;

        СтруктураДанных = Новый Структура;
        СтруктураДанных.Вставить("КлиентНаименование", Строка(Выборка.Клиент));
        СтруктураДанных.Вставить("Клиент", XMLСтрока(Выборка.Клиент));
        СтруктураДанных.Вставить("НомерТелефона", Строка(Выборка.НомерТелефона));
        СтруктураДанных.Вставить("НомерТелефонаБезКодов", Строка(Выборка.НомерТелефонаБезКодов));
		СтруктураДанных.Вставить("Автомобиль", Строка(Выборка.Наименование));
        МассивДанных.Добавить(СтруктураДанных);
    КонецЦикла;

    Результат = Ответы.СериализоватьВJSON(МассивДанных, Ложь);
КонецПроцедуры

Процедура ПолучитьГрафикиАналитика(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка)
    ТекстЗапроса = "";
   	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.Подразделение КАК Подразделение,
	|	СУММА(ПриходныйКассовыйОрдерРасшифровкаПлатежа.Сумма) КАК Сумма,
	|	НАЧАЛОПЕРИОДА(ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ приходные
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				Справочник.СтатьиДвиженияДенежныхСредств.Ссылка
	|			ИЗ
	|				Справочник.СтатьиДвиженияДенежныхСредств
	|			ГДЕ
	|				Справочник.СтатьиДвиженияДенежныхСредств.Наименование = ""Расчеты с покупателями"")
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.Подразделение,
	|	НАЧАЛОПЕРИОДА(ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РасходныйКассовыйОрдерРасшифровкаПлатежа.Сумма) КАК Сумма,
	|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата, ДЕНЬ) КАК Дата,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.Подразделение КАК КассаПодразделение
	|ПОМЕСТИТЬ raschetspostavshikami
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				Справочник.СтатьиДвиженияДенежныхСредств.Ссылка
	|			ИЗ
	|				Справочник.СтатьиДвиженияДенежныхСредств
	|			ГДЕ
	|				Справочник.СтатьиДвиженияДенежныхСредств.Наименование = ""Расчеты с поставщиками"")
	|	И НЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.Подразделение.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.Подразделение,
	|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РасходныйКассовыйОрдерРасшифровкаПлатежа.Сумма) КАК Сумма,
	|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата, ДЕНЬ) КАК Дата,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.Подразделение КАК КассаПодразделение
	|ПОМЕСТИТЬ zp
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				Справочник.СтатьиДвиженияДенежныхСредств.Ссылка
	|			ИЗ
	|				Справочник.СтатьиДвиженияДенежныхСредств
	|			ГДЕ
	|				Справочник.СтатьиДвиженияДенежныхСредств.Наименование = ""ЗП"")
	|	И НЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.Подразделение.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.Подразделение,
	|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РасходныйКассовыйОрдерРасшифровкаПлатежа.Сумма) КАК Сумма,
	|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата, ДЕНЬ) КАК Дата,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.Подразделение КАК КассаПодразделение
	|ПОМЕСТИТЬ расходные
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				Справочник.СтатьиДвиженияДенежныхСредств.Ссылка
	|			ИЗ
	|				Справочник.СтатьиДвиженияДенежныхСредств
	|			ГДЕ
	|				Справочник.СтатьиДвиженияДенежныхСредств.Наименование = ""Инкассация"")
	|	И НЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.Подразделение.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Касса.Подразделение,
	|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Дата КАК Дата,
	|	ВложенныйЗапрос.Подразделение КАК Подразделение,
	|	СУММА(ВложенныйЗапрос.СуммаПриход) КАК СуммаПриход,
	|	СУММА(ВложенныйЗапрос.СуммаРасход) КАК СуммаРасход,
	|	СУММА(ВложенныйЗапрос.СуммаРасчетовСПоставщиком) КАК СуммаРасчетовСПоставщиком,
	|	СУММА(ВложенныйЗапрос.СуммаЗП) КАК СуммаЗП
	|ИЗ
	|	(ВЫБРАТЬ
	|		приходные.Подразделение КАК Подразделение,
	|		приходные.Дата КАК Дата,
	|		приходные.Сумма КАК СуммаПриход,
	|		0 КАК СуммаРасход,
	|		0 КАК СуммаРасчетовСПоставщиком,
	|		0 КАК СуммаЗП
	|	ИЗ
	|		приходные КАК приходные
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		расходные.КассаПодразделение,
	|		расходные.Дата,
	|		0,
	|		расходные.Сумма,
	|		0,
	|		0
	|	ИЗ
	|		расходные КАК расходные
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		raschetspostavshikami.КассаПодразделение,
	|		raschetspostavshikami.Дата,
	|		0,
	|		0,
	|		raschetspostavshikami.Сумма,
	|		0
	|	ИЗ
	|		raschetspostavshikami КАК raschetspostavshikami
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		zp.КассаПодразделение,
	|		zp.Дата,
	|		0,
	|		0,
	|		0,
	|		zp.Сумма
	|	ИЗ
	|		zp КАК zp) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Дата";
	
	//Запрос.УстановитьПараметр("ДатаК", КонецДня(ТекущаяДата()))
	//Запрос.УстановитьПараметр("ДатаН", НачалоДня(ТекущаяДата()));
	РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    МассивДанных = Новый Массив;

    Пока Выборка.Следующий() Цикл
        СтруктураДанных = Новый Структура;
        СтруктураДанных.Вставить("Подразделение", Строка(Выборка.Подразделение));
		// Преобразование даты в UTC и установка времени на 23:59:59
    	ДатаUTC = УниверсальноеВремя(Выборка.Дата, "GMT+0");
    	//ДатаUTC = НачалоДня(ДатаUTC) + 23 * 60*60 + 59*60 + 59;
    	СтроковоеПредставление = Формат(ДатаUTC, "ДФ='yyyy-MM-ddTHH:mm:ssZ'"); 
		СтруктураДанных.Вставить("Дата", СтроковоеПредставление);
		//СтруктураДанных.Вставить("Дата", XMLСтрока(Выборка.Дата));
        СтруктураДанных.Вставить("СуммаПриход", Строка(Выборка.СуммаПриход));
        СтруктураДанных.Вставить("СуммаРасход", Строка(Выборка.СуммаРасход));
		СтруктураДанных.Вставить("СуммаЗП", Строка(Выборка.СуммаЗП));
		СтруктураДанных.Вставить("СуммаРасчетовСПоставщиком", Строка(Выборка.СуммаРасчетовСПоставщиком));
        МассивДанных.Добавить(СтруктураДанных);
    КонецЦикла;

    Результат = Ответы.СериализоватьВJSON(МассивДанных, Ложь);
КонецПроцедуры //ГрафикиАналитика   

Функция TimeStamp(Дата = Неопределено) Экспорт
    Если Дата = Неопределено Тогда
        Дата = ТекущаяДата();
	КонецЕсли;
	Сейчас = УниверсальноеВремя(Дата, "GMT+0");
    НачалоЭпохи = Дата("19700101");
    ПрошлоСекунд = Сейчас - НачалоЭпохи;
    Возврат Формат(ПрошлоСекунд, "ЧДЦ=0; ЧГ=");
КонецФункции

Процедура ПолучитьГрафикиАналитикаЛюбви(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка)
    ТекстЗапроса = "";
   	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
|	ERP_STO_OfficeRevenue.Date КАК Date,
|	ERP_STO_OfficeRevenue.Username КАК Username,
|	ERP_STO_OfficeRevenue.Statistics КАК Statistics,
|	ERP_STO_OfficeRevenue.Recipient КАК Recipient
|ИЗ
|	РегистрСведений.ERP_STO_OfficeRevenue КАК ERP_STO_OfficeRevenue";
	
	//Запрос.УстановитьПараметр("ДатаК", КонецДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("ДатаН", НачалоДня(ТекущаяДата()));
	РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    МассивДанных = Новый Массив;

    Пока Выборка.Следующий() Цикл
        СтруктураДанных = Новый Структура;
        СтруктураДанных.Вставить("Подразделение", Строка(Выборка.Username));
        СтруктураДанных.Вставить("Дата", XMLСтрока(Выборка.Date));
        СтруктураДанных.Вставить("СуммаПриход", Строка(Выборка.Statistics));
        СтруктураДанных.Вставить("СуммаРасход", Строка(Выборка.Statistics));
		СтруктураДанных.Вставить("СуммаЗП", Строка(Выборка.Statistics));
		СтруктураДанных.Вставить("СуммаРасчетовСПоставщиком", Строка(Выборка.Statistics));
        МассивДанных.Добавить(СтруктураДанных);
    КонецЦикла;

    Результат = Ответы.СериализоватьВJSON(МассивДанных, Ложь);
КонецПроцедуры //ГрафикиАналитикаlove 



Процедура ПолучитьОстаткиСредств(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка)
    ТекстЗапроса = "";
   	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РуководительПодразделений
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.ТекущийРуководитель = &ТекущийРуководитель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Кассы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Кассы
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|			ЛЕВОЕ СОЕДИНЕНИЕ РуководительПодразделений КАК РуководительПодразделений
	|			ПО СтруктураПредприятия.Ссылка = РуководительПодразделений.Ссылка
	|		ПО Кассы.Подразделение = СтруктураПредприятия.Ссылка
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				РуководительПодразделений.Ссылка
	|			ИЗ
	|				РуководительПодразделений КАК РуководительПодразделений)
	|	И РуководительПодразделений.Ссылка ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваНаличныеОстатки.Касса.Подразделение КАК Подразделение,
	|	СУММА(ДенежныеСредстваНаличныеОстатки.СуммаРеглОстаток) КАК Остаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
	|			&ТекущаяДата,
	|			Касса В
	|				(ВЫБРАТЬ
	|					Кассы.Ссылка
	|				ИЗ
	|					Кассы КАК Кассы)) КАК ДенежныеСредстваНаличныеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваНаличныеОстатки.Касса.Подразделение";

	Запрос.УстановитьПараметр("ТекущийРуководитель",Справочники.ФизическиеЛица.НайтиПоНаименованию("ЗОЛОТЫХ ДЕНИС ВЛАДИМИРОВИЧ"));
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    МассивДанных = Новый Массив;

    Пока Выборка.Следующий() Цикл
        СтруктураДанных = Новый Структура;
        СтруктураДанных.Вставить("name", Строка(Выборка.Подразделение));
        СтруктураДанных.Вставить("amount", Строка(Выборка.Остаток));
        МассивДанных.Добавить(СтруктураДанных);
    КонецЦикла;

    Результат = Ответы.СериализоватьВJSON(МассивДанных, Ложь);
КонецПроцедуры //ГрафикиАналитика

Процедура  ПолучитьДолгиПоставщикам(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка)
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ERP_STO_ОтчетФилиалаКонтрагенты.Контрагент КАК Контрагент,
	|	ERP_STO_ОтчетФилиалаКонтрагенты.СуммаДолгаКонтрагенту КАК СуммаДолгаКонтрагенту,
	|	ERP_STO_ОтчетФилиалаКонтрагенты.Ссылка.Дата КАК Дата,
	|	ERP_STO_ОтчетФилиалаКонтрагенты.Ссылка.Филиал КАК Филиал
	|ИЗ
	|	Документ.ERP_STO_ОтчетФилиала.Контрагенты КАК ERP_STO_ОтчетФилиалаКонтрагенты
	|ГДЕ
	|	ERP_STO_ОтчетФилиалаКонтрагенты.СуммаДолгаКонтрагенту > 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура;
		Строка.Вставить("Контрагент", Выборка.Контрагент.Наименование);
		Строка.Вставить("СуммаДолгаКонтрагенту", Выборка.СуммаДолгаКонтрагенту);
		Строка.Вставить("Дата", Формат(Выборка.Дата, "ДФ=yyyy-MM-ddTHH:mm:ss"));
		Строка.Вставить("Филиал", Выборка.Филиал.Наименование);
		Результат.Добавить(Строка);
	КонецЦикла;       
	
	Если Результат.Количество() > 0 Тогда
    Результат = Ответы.СериализоватьВJSON(Результат, Ложь);
Иначе
    Ошибка = "Нет данных";
    Результат = "";
КонецЕсли;

КонецПроцедуры 

Процедура ПолучитьCписокКонтактовДляОтправки(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка)
	
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		Если Параметр.Ключ = "hash_login" Тогда
			ХэшЛогин = Параметр.Значение;
		ИначеЕсли Параметр.Ключ = "organization" Тогда
			Владелец = Параметр.Значение;
		КонецЕсли;
	КонецЦикла;	
	
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ПартнерыКонтактнаяИнформация.НомерТелефона) КАК НомерТелефона,
	|	ПартнерыКонтактнаяИнформация.Ссылка.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	МАКСИМУМ(ТелеграмНастройки.ИдентификаторЧата) КАК ИдентификаторЧата,
	|	Подразделения.Владелец КАК Организация,
	|	Боты.Наименование КАК НаименованиеБота
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТелеграмНастройкиПользователей КАК ТелеграмНастройки
	|		ПО (ПартнерыКонтактнаяИнформация.Ссылка = ТелеграмНастройки.Партнер)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПодразделенияОрганизаций.Наименование КАК Наименование,
	|			ПодразделенияОрганизаций.Владелец КАК Владелец
	|		ИЗ
	|			Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|				ПО ПодразделенияОрганизаций.Наименование = СтруктураПредприятия.Наименование) КАК Подразделения
	|		ПО (ПартнерыКонтактнаяИнформация.Ссылка.ОсновнойМенеджер.Подразделение.Наименование = Подразделения.Наименование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТелеграмБоты КАК Боты
	|		ПО (ПОДСТРОКА(Боты.Описание, 1, 100) = &Владелец)
	|ГДЕ
	|	Подразделения.Владелец.Наименование = &Владелец 
	|	И ПартнерыКонтактнаяИнформация.НомерТелефона = &НомерТелефона
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартнерыКонтактнаяИнформация.Ссылка,
	|	ПартнерыКонтактнаяИнформация.Ссылка.ОсновнойМенеджер,
	|	Подразделения.Владелец,
	|	Боты.Наименование";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("НомерТелефона", "380506264602");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Новый Массив;
    
	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура;
		Строка.Вставить("uniqueID", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		Строка.Вставить("contactID", Выборка.Ссылка.Наименование);
		Строка.Вставить("phoneNumber", Выборка.НомерТелефона);
		Если Выборка.НаименованиеБота = Null Тогда
			Строка.Вставить("botName", "-");
		Иначе
			Строка.Вставить("botName", Выборка.НаименованиеБота);
		КонецЕсли;
		//Строка.Вставить("botName", Выборка.НаименованиеБота);
		Если Выборка.ИдентификаторЧата = Null Тогда
			Строка.Вставить("chatID", "-");
		Иначе
			Строка.Вставить("chatID", Выборка.ИдентификаторЧата);
		КонецЕсли;
		Результат.Добавить(Строка);
	КонецЦикла;       
	
	Если Результат.Количество() > 0 Тогда
		
		Результат = Ответы.СериализоватьВJSON(Результат, Ложь); 
	Иначе
		Ошибка = "Нет данных";
		Результат = "";
	КонецЕсли;
	
КонецПроцедуры 

Процедура ОтправитьСообщениеКонтактам(СписокКонтактов, ТекстСообщения)
    Для каждого Контакт Из СписокКонтактов Цикл
        ДатаОтправки = ТекущаяДата();
		ДатаОтправки = ?(ДатаОтправки = Дата(1, 1, 1), ТекущаяДата(), ДатаОтправки);
		//SmsLink = ERP_STO_ОбщегоНазначения.СоздатьДОкументУведомление(Контакт.contactID,Контакт, Контакт.phoneNumber, ТекстСообщения, ДатаОтправки, истина);
    КонецЦикла;
КонецПроцедуры   


Процедура ПолучитьСписокОрганизаций(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка)
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации"; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура;
		Строка.Вставить("org_name", Выборка.Наименование);
		Результат.Добавить(Строка);
	КонецЦикла;	
	Если Результат.Количество() > 0 Тогда
    Результат = Ответы.СериализоватьВJSON(Результат, Ложь);
Иначе
    Ошибка = "Нет данных";
    Результат = "";
КонецЕсли;

КонецПроцедуры //ПолучитьСписокОрганизаций 

Процедура ПолучитьCтатусRRO(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка)
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистраторыРасчетныхОпераций.Ссылка КАК Ссылка,
	|	РегистраторыРасчетныхОпераций.ВерсияДанных КАК ВерсияДанных,
	|	РегистраторыРасчетныхОпераций.ПометкаУдаления КАК ПометкаУдаления,
	|	РегистраторыРасчетныхОпераций.Код КАК Код,
	|	РегистраторыРасчетныхОпераций.Наименование КАК Наименование,
	|	РегистраторыРасчетныхОпераций.ИмяУстройства КАК ИмяУстройства,
	|	РегистраторыРасчетныхОпераций.Токен КАК Токен,
	|	РегистраторыРасчетныхОпераций.Используется КАК Используется,
	|	РегистраторыРасчетныхОпераций.Касса КАК Касса,
	|	РегистраторыРасчетныхОпераций.ИдентификаторКассы КАК ИдентификаторКассы,
	|	РегистраторыРасчетныхОпераций.ИнфоРРО КАК ИнфоРРО,
	|	РегистраторыРасчетныхОпераций.Предопределенный КАК Предопределенный,
	|	РегистраторыРасчетныхОпераций.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	РегистраторыРасчетныхОпераций.Представление КАК Представление,
	|	ПоследниеСтатусы.Касса КАК Касса1,
	|	ПоследниеСтатусы.ДатаДействий КАК ПоследняяДатаДействия,
	|	ПоследниеСтатусы.Статус КАК ПоследнийСтатус
	|ИЗ
	|	Справочник.РегистраторыРасчетныхОпераций КАК РегистраторыРасчетныхОпераций
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтатусыКассВнутр.Касса КАК Касса,
	|			МАКСИМУМ(СтатусыКассВнутр.ДатаДействий) КАК ПоследняяДатаДействия
	|		ИЗ
	|			РегистрСведений.СтатусыКасс КАК СтатусыКассВнутр
	|		СГРУППИРОВАТЬ ПО
	|			СтатусыКассВнутр.Касса) КАК МаксимальныеДаты
	|		ПО РегистраторыРасчетныхОпераций.Касса = МаксимальныеДаты.Касса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыКасс КАК ПоследниеСтатусы
	|		ПО РегистраторыРасчетныхОпераций.Касса = ПоследниеСтатусы.Касса
	|			И ПоследниеСтатусы.ДатаДействий = МаксимальныеДаты.ПоследняяДатаДействия
	|СГРУППИРОВАТЬ ПО
	|	РегистраторыРасчетныхОпераций.ВерсияДанных,
	|	РегистраторыРасчетныхОпераций.ПометкаУдаления,
	|	РегистраторыРасчетныхОпераций.Код,
	|	РегистраторыРасчетныхОпераций.Наименование,
	|	РегистраторыРасчетныхОпераций.ИмяУстройства,
	|	РегистраторыРасчетныхОпераций.Токен,
	|	РегистраторыРасчетныхОпераций.Используется,
	|	РегистраторыРасчетныхОпераций.Касса,
	|	РегистраторыРасчетныхОпераций.ИдентификаторКассы,
	|	РегистраторыРасчетныхОпераций.ИнфоРРО,
	|	РегистраторыРасчетныхОпераций.Предопределенный,
	|	РегистраторыРасчетныхОпераций.ИмяПредопределенныхДанных,
	|	РегистраторыРасчетныхОпераций.Представление,
	|	ПоследниеСтатусы.Касса,
	|	ПоследниеСтатусы.Статус,
	|	РегистраторыРасчетныхОпераций.Ссылка,
	|	ПоследниеСтатусы.ДатаДействий"; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	МассивДанных = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура;
        СтруктураДанных.Вставить("ИмяУстройства", Выборка.Ссылка.ИмяУстройства);
        СтруктураДанных.Вставить("Код", Выборка.Код);
        СтруктураДанных.Вставить("Наименование", Выборка.Наименование);
        СтруктураДанных.Вставить("ИдентификаторКассы", "КСС_" + Выборка.ИдентификаторКассы);
        СтруктураДанных.Вставить("ПоследнийСтатус", Выборка.ПоследнийСтатус);
        СтруктураДанных.Вставить("ПоследняяДатаДействия", Выборка.ПоследняяДатаДействия);
		
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Результат = Ответы.СериализоватьВJSON(МассивДанных, Ложь);
	
КонецПроцедуры //ПолучитьСписокRROстатусов

  

Процедура OpenCloseRRO (ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка)
Об = Обработки.ОткрытиеИЗакрытиеСменПРРО.Создать();
Если ПараметрыЗапроса["Status"] ="open" Тогда
Об.пЗакрытьСменуПоКассе(ПараметрыЗапроса["cashRegisterId"]);
иначе 
Об.пОткрытьСменуПоКассе(ПараметрыЗапроса["cashRegisterId"]);
КонецЕсли;

//Обработки.ОткрытиеИЗакрытиеСменПРРО.пОткрытьСменуПоКассе(ПараметрыЗапроса["cashRegisterId"]);	
КонецПроцедуры

Процедура ПолучитьКлиентовback(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Клиент,
	|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.НомерТелефона <> """"
	|	И ПартнерыКонтактнаяИнформация.Ссылка.Клиент
	|	И НЕ ПартнерыКонтактнаяИнформация.Ссылка.ПометкаУдаления
	|СГРУППИРОВАТЬ ПО
	|ПартнерыКонтактнаяИнформация.Ссылка,
	|ПартнерыКонтактнаяИнформация.НомерТелефона,
	|ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивДанных = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("КлиентНаименование", Строка(Выборка.Клиент));
		СтруктураДанных.Вставить("Клиент", XMLСтрока(Выборка.Клиент));
		СтруктураДанных.Вставить("НомерТелефона", Строка(Выборка.НомерТелефона));
		СтруктураДанных.Вставить("НомерТелефонаБезКодов", Строка(Выборка.НомерТелефонаБезКодов));
		
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	
	
	Результат = Ответы.СериализоватьВJSON(МассивДанных, Ложь);
КонецПроцедуры

Процедура ПолучитьАвто(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ERP_STO_Автомобили.Владелец КАК Клиент,
	|	ERP_STO_Автомобили.Ссылка КАК Автомобиль
	|ИЗ
	|	Справочник.ERP_STO_Автомобили КАК ERP_STO_Автомобили
	|ГДЕ
	|	НЕ ERP_STO_Автомобили.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивДанных = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("КлиентНаименование", Строка(Выборка.Клиент));
		СтруктураДанных.Вставить("Клиент", XMLСтрока(Выборка.Клиент));
		СтруктураДанных.Вставить("АвтоНаименование", Строка(Выборка.Автомобиль));
		СтруктураДанных.Вставить("Авто", XMLСтрока(Выборка.Автомобиль));
		
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	
	
	Результат = Ответы.СериализоватьВJSON(МассивДанных, Ложь);
КонецПроцедуры

Процедура ПолучитьАвтоВладельца(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ERP_STO_Автомобили.Ссылка КАК Автомобиль,
	|	ERP_STO_Автомобили.Владелец КАК Клиент,
	|	ERP_STO_Автомобили.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ERP_STO_Автомобили КАК ERP_STO_Автомобили
	|ГДЕ
	|	ERP_STO_Автомобили.Владелец = &Владелец";
	Владелец = Справочники.ERP_STO_Автомобили.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыЗапроса.Получить("hash_login")));
	Запрос.УстановитьПараметр("Владелец", Владелец.Владелец);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивДанных = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("КлиентНаименование", Строка(Выборка.Клиент));
		СтруктураДанных.Вставить("Клиент", XMLСтрока(Выборка.Клиент));
		СтруктураДанных.Вставить("АвтоНаименование", Строка(Выборка.Автомобиль));
		СтруктураДанных.Вставить("Авто", XMLСтрока(Выборка.Автомобиль));
		
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	
	
	Результат = Ответы.СериализоватьВJSON(МассивДанных, Ложь);
КонецПроцедуры 

Процедура ПолучитьИсториюАвтоВладельца(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(ERP_STO_АктУслугСТОСчет.Ссылка.Дата, ДЕНЬ) КАК Период,
	|	ERP_STO_АктУслугСТОСчет.Ссылка.Автомобиль КАК Автомобиль,
	|	ERP_STO_АктУслугСТОСчет.Ссылка.Автомобиль.Код КАК КодАвтомобиля,
	|	ERP_STO_АктУслугСТОСчет.Ссылка.Клиент КАК Клиент,
	|	ERP_STO_АктУслугСТОСчет.Ссылка КАК АктУслугСТО,
	|	ERP_STO_АктУслугСТОСчет.Товар КАК Товар,
	|	ERP_STO_АктУслугСТОСчет.Валюта КАК Валюта,
	|	ERP_STO_АктУслугСТОСчет.Услуга КАК Услуга,
	|	ERP_STO_АктУслугСТОСчет.ВалютаУслуги КАК ВалютаУслуги,
	|	СУММА(ERP_STO_АктУслугСТОСчет.Количество) КАК Количество,
	|	СУММА(ERP_STO_АктУслугСТОСчет.Цена * ERP_STO_АктУслугСТОСчет.Количество) КАК СтоимостьТоваров,
	|	СУММА(ERP_STO_АктУслугСТОСчет.ЦенаУслуги * ERP_STO_АктУслугСТОСчет.КоличествоУслуги) КАК СтоимостьУслуги,
	|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	СУММА(ERP_STO_АктУслугСТОСчет.Цена * ERP_STO_АктУслугСТОСчет.Количество + ERP_STO_АктУслугСТОСчет.ЦенаУслуги) КАК СтоимостьОбщая,
	|	ДополнительныеДанныеОбАвтомобиляхГосНомер.ЗначениеПоказателя КАК ГосНомер,
	|	ERP_STO_АктУслугСТО.Состояние КАК Состояние
	|ПОМЕСТИТЬ Основная
	|ИЗ
	|	Документ.ERP_STO_АктУслугСТО.Счет КАК ERP_STO_АктУслугСТОСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|		ПО (ERP_STO_АктУслугСТОСчет.Ссылка.Клиент = ПартнерыКонтактнаяИнформация.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ERP_STO_ДополнительныеДанныеОбАвтомобилях КАК ДополнительныеДанныеОбАвтомобиляхГосНомер
	|		ПО (ERP_STO_АктУслугСТОСчет.Ссылка.Автомобиль = ДополнительныеДанныеОбАвтомобиляхГосНомер.Автомобиль)
	|			И (ДополнительныеДанныеОбАвтомобиляхГосНомер.Показатель = &ГосНомерПоказатель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ERP_STO_АктУслугСТО КАК ERP_STO_АктУслугСТО
	|		ПО (ERP_STO_АктУслугСТОСчет.Ссылка = ERP_STO_АктУслугСТО.Ссылка)
	|ГДЕ
	|	НЕ ПартнерыКонтактнаяИнформация.Ссылка.ПометкаУдаления
	|	И ERP_STO_АктУслугСТОСчет.Ссылка.Автомобиль = &Автомобиль
	|	И НЕ ERP_STO_АктУслугСТОСчет.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ERP_STO_АктУслугСТОСчет.Товар,
	|	ERP_STO_АктУслугСТОСчет.Услуга,
	|	ERP_STO_АктУслугСТОСчет.ВалютаУслуги,
	|	ERP_STO_АктУслугСТОСчет.Валюта,
	|	ПартнерыКонтактнаяИнформация.НомерТелефона,
	|	НАЧАЛОПЕРИОДА(ERP_STO_АктУслугСТОСчет.Ссылка.Дата, ДЕНЬ),
	|	ERP_STO_АктУслугСТОСчет.Ссылка.Автомобиль,
	|	ERP_STO_АктУслугСТОСчет.Ссылка.Автомобиль.Код,
	|	ERP_STO_АктУслугСТОСчет.Ссылка.Клиент,
	|	ERP_STO_АктУслугСТОСчет.Ссылка,
	|	ДополнительныеДанныеОбАвтомобиляхГосНомер.ЗначениеПоказателя,
	|	ERP_STO_АктУслугСТО.Состояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Основная.Период КАК Период,
	|	Основная.Товар КАК Товар,
	|	Основная.Услуга КАК Услуга,
	|	Основная.СтоимостьТоваров КАК СтоимостьТоваров,
	|	Основная.СтоимостьУслуги КАК СтоимостьУслуги,
	|	МАКСИМУМ(ЕСТЬNULL(ERP_STO_ИсторияПробега.Пробег, 0)) КАК Пробег
	|ИЗ
	|	Основная КАК Основная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ERP_STO_ИсторияПробега КАК ERP_STO_ИсторияПробега
	|		ПО Основная.Автомобиль = ERP_STO_ИсторияПробега.Автомобиль
	|			И Основная.Клиент = ERP_STO_ИсторияПробега.Клиент
	|			И Основная.АктУслугСТО = ERP_STO_ИсторияПробега.АктУслугСТО
	|ГДЕ
	|	(Основная.Состояние = &СостояниеВыполнено
	|			ИЛИ Основная.Состояние = &СостояниеПриостановлено)
	|
	|СГРУППИРОВАТЬ ПО
	|	Основная.Период,
	|	Основная.Товар,
	|	Основная.Услуга,
	|	Основная.СтоимостьТоваров,
	|	Основная.СтоимостьУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Период";  
	Автомобиль = Справочники.ERP_STO_Автомобили.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыЗапроса.Получить("carId")));
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	Запрос.УстановитьПараметр("Состояние", Перечисления.ERP_STO_СостоянияВыполненияЗаказов.Новый);
	Запрос.УстановитьПараметр("СостояниеВыполнено", Перечисления.ERP_STO_СостоянияВыполненияЗаказов.Выполнен);
	Запрос.УстановитьПараметр("СостояниеПриостановлено", Перечисления.ERP_STO_СостоянияВыполненияЗаказов.Приостановлен);
	Запрос.УстановитьПараметр("ГосНомерПоказатель", Неопределено); 
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивДанных = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура;
		//СтруктураДанных.Вставить("Период", ERP_STO_ОбщегоНазначенияВызовСервера.ДатаВUnixTimestamp(Выборка.Период)*1000);
		СтруктураДанных.Вставить("Пробег", Выборка.Пробег);
		СтруктураДанных.Вставить("Товары", Новый Массив);
		СтруктураДанных.Вставить("Услуги", Новый Массив);
		
		Подвыборка = Выборка.Выбрать();
		Пока Подвыборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Подвыборка.Товар) Тогда
				Товар = Новый Структура("Наименование, Стоимость", Подвыборка.Товар.Наименование, Подвыборка.СтоимостьТоваров);
				СтруктураДанных.Товары.Добавить(Товар);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Подвыборка.Услуга) Тогда
				Услуга = Новый Структура("Наименование, Стоимость", Подвыборка.Услуга.Наименование, Подвыборка.СтоимостьУслуги);
				СтруктураДанных.Услуги.Добавить(Услуга);
			КонецЕсли;
		КонецЦикла;
		
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Результат = Ответы.СериализоватьВJSON(МассивДанных, Ложь);
КонецПроцедуры


Процедура ДобавитьЗаписьКалендаряСтарая(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	КлиентСсылка = ПараметрыЗапроса["client_ref"];
	АвтоСсылка = ПараметрыЗапроса["auto_ref"];
	Если ЗначениеЗаполнено(КлиентСсылка) Тогда
		Клиент = ВыборкаДанныхСайтСервер.ПолучитьКлиентаПоИдентификатору(КлиентСсылка);
	Иначе
		Клиент = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АвтоСсылка) Тогда
		Авто = ВыборкаДанныхСайтСервер.ПолучитьАвтомобильПоИдентификатору(АвтоСсылка);
	Иначе
		Авто = Неопределено;
	КонецЕсли;
	
	ДатаНачала = ПараметрыЗапроса["date_time_start"];
	//ДатаОкончания = ПараметрыЗапроса["date_time_finish"];
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ПрочитатьДатуJSON(ДатаНачала, ФорматДатыJSON.ISO);
	Иначе
		ДатаНачала = ТекущаяДата();
	КонецЕсли;
	
	Время = ПараметрыЗапроса["time"];
	Час = Лев(Время, 2);
	Если Лев(Час, 1) = "0" Тогда
		Час = Прав(Час, 1)
	КонецЕсли;
	
	Минута = Прав(Время, 2);
	Если Лев(Минута, 1) = "0" Тогда
		Минута = Прав(Минута, 1)
	КонецЕсли;
	
	ДатаНачала = ДатаНачала + (Час * 3600) + (Минута * 60);
	
	
	//Если ЗначениеЗаполнено(ДатаОкончания) Тогда
	//	ДатаОкончания = ПрочитатьДатуJSON(ДатаОкончания, ФорматДатыJSON.ISO);
	//Иначе
	//	ДатаОкончания = ДатаНачала + (30 * 60);
	//КонецЕсли;
	
	//преобразование дат
	
	Телефон = ПараметрыЗапроса["phone"];
	Имя = ПараметрыЗапроса["name"];
	АвтоТекст = ПараметрыЗапроса["car"];
	Филиал = ПараметрыЗапроса["filial"];
	Если ЗначениеЗаполнено(Филиал) Тогда
		Филиал = ВыборкаДанныхСайтСервер.ПолучитьФилиалПоИдентификатору(Филиал);
	КонецЕсли;
	Пост = ПараметрыЗапроса["post"];
	Если ЗначениеЗаполнено(Пост) Тогда
		Пост = ВыборкаДанныхСайтСервер.ПолучитьПостПоИдентификатору(Пост);
	КонецЕсли;
	Комментарий = ПараметрыЗапроса["comment"];
	
	ОтправлятьСМС = ПараметрыЗапроса.Свойство("sendsms");
		
	//Возврат;
	НачатьТранзакцию();
	//создаем клиента при необходимости
	Если Не ЗначениеЗаполнено(Клиент) И ЗначениеЗаполнено(Имя) Тогда
		Клиент = "";
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Ошибка = "Не удалось создать клиента:" + Символы.ПС + ПолучитьВыведенныеСообщенияПользователю();
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//создаем авто при необходимости
	Если Не ЗначениеЗаполнено(Авто) И ЗначениеЗаполнено(АвтоТекст) И ЗначениеЗаполнено(Клиент) Тогда
		//Авто = ERP_STO_ОбщегоНазначения.СоздатьАвтомобильНаСервере(Клиент, АвтоТекст, "");//третий параметр - Госномер
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Ошибка = "Не удалось создать клиента:" + Символы.ПС + ПолучитьВыведенныеСообщенияПользователю();
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//тзНастройкиПользователя = ERP_STO_ОбщегоНазначения.ромПолучитьНастройкиПользователя(ДанныеПользователя.ПользовательСправочник);
	//Если не тзНастройкиПользователя = Неопределено И тзНастройкиПользователя.Количество() Тогда
	//	Настройки = тзНастройкиПользователя[0];
	//Иначе
	//	Настройки = Неопределено;
	//КонецЕсли;
	
	НоваяЗаписьКалендаря = Справочники.ERP_STO_ЗаписиРабочегоКалендаря.СоздатьЭлемент();
	НоваяЗаписьКалендаря.Автор = ДанныеПользователя.ПользовательСправочник;
	НоваяЗаписьКалендаря.ДатаНачала = ДатаНачала;
	НоваяЗаписьКалендаря.ДатаОкончания = ДатаНачала + (30 * 60);
	//НоваяЗаписьКалендаря.ДатаОкончания = ДатаОкончания;
	//НоваяЗаписьКалендаря.Наименование = Строка(ОбъектСсылка);
	НоваяЗаписьКалендаря.Описание = Комментарий;
	НоваяЗаписьКалендаря.НомерТелефона = Телефон;
	НоваяЗаписьКалендаря.Клиент = Клиент;
	НоваяЗаписьКалендаря.Автомобиль = Авто;
	НоваяЗаписьКалендаря.Филиал = Филиал;
	НоваяЗаписьКалендаря.ПостВыполненияРабот = Пост;
	НоваяЗаписьКалендаря.Пользователь = ДанныеПользователя.ПользовательСправочник;
	НоваяЗаписьКалендаря.Статус = Перечисления.ERP_STO_СостоянияВыполненияЗаказов.Новый;
	НоваяЗаписьКалендаря.Подразделение = Филиал;
	НоваяЗаписьКалендаря.ОтправлятьСМС = ОтправлятьСМС;  
	//Если Настройки <> Неопределено Тогда
	//	НоваяЗаписьКалендаря.БанковскийСчетКассаПредоплаты = Настройки.КассаПредоплаты;
	//	НоваяЗаписьКалендаря.БанковскийСчетКассаПостоплаты = Настройки.Касса;
	//КонецЕсли;
	
	Попытка
		ПараметрыЗаписи = ВыборкаДанныхСайтСервер.ДанныеРеквизитовОбъекта(НоваяЗаписьКалендаря);
		//АктУслуг = ERP_STO_ФормированиеДокументов.СформироватьВнутренниеДокументыСТО(ПараметрыЗаписи).АктУслугСТО;
		//НоваяЗаписьКалендаря.ДокументОснование = АктУслуг;
		
		НоваяЗаписьКалендаря.Записать();
		Результат = "Запись календаря успешно создана";
		
		ЗафиксироватьТранзакцию();
	Исключение
		Ошибка = "Не удалось создать запись календаря:" + 
		Символы.ПС + ПолучитьВыведенныеСообщенияПользователю() + 
		Символы.ПС + ОписаниеОшибки();
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

Процедура ДобавитьАктУслуг(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	КлиентСсылка = ПараметрыЗапроса["client_ref"];
	АвтоСсылка = ПараметрыЗапроса["auto_ref"];
	Если ЗначениеЗаполнено(КлиентСсылка) Тогда
		Клиент = ВыборкаДанныхСайтСервер.ПолучитьКлиентаПоИдентификатору(КлиентСсылка);
	Иначе
		Клиент = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АвтоСсылка) Тогда
		Авто = ВыборкаДанныхСайтСервер.ПолучитьАвтомобильПоИдентификатору(АвтоСсылка);
	Иначе
		Авто = Неопределено;
	КонецЕсли;
	
	ДатаНачала = ПараметрыЗапроса["date_time_start"];
	//ДатаОкончания = ПараметрыЗапроса["date_time_finish"];
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ПрочитатьДатуJSON(ДатаНачала, ФорматДатыJSON.ISO);
	Иначе
		ДатаНачала = ТекущаяДата();
	КонецЕсли;
	
	Время = ПараметрыЗапроса["time"];
	Час = Лев(Время, 2);
	Если Лев(Час, 1) = "0" Тогда
		Час = Прав(Час, 1)
	КонецЕсли;
	
	Минута = Прав(Время, 2);
	Если Лев(Минута, 1) = "0" Тогда
		Минута = Прав(Минута, 1)
	КонецЕсли;
	
	ДатаНачала = ДатаНачала + (Час * 3600) + (Минута * 60);
	
	
	//Если ЗначениеЗаполнено(ДатаОкончания) Тогда
	//	ДатаОкончания = ПрочитатьДатуJSON(ДатаОкончания, ФорматДатыJSON.ISO);
	//Иначе
	//	ДатаОкончания = ДатаНачала + (30 * 60);
	//КонецЕсли;
	
	//преобразование дат
	
	Телефон = ПараметрыЗапроса["phone"];
	Имя = ПараметрыЗапроса["name"];
	АвтоТекст = ПараметрыЗапроса["car"];
	Филиал = ПараметрыЗапроса["filial"];
	Если ЗначениеЗаполнено(Филиал) Тогда
		Филиал = ВыборкаДанныхСайтСервер.ПолучитьФилиалПоИдентификатору(Филиал);
	КонецЕсли;
	Пост = ПараметрыЗапроса["post"];
	Если ЗначениеЗаполнено(Пост) Тогда
		Пост = ВыборкаДанныхСайтСервер.ПолучитьПостПоИдентификатору(Пост);
	КонецЕсли;
	Комментарий = ПараметрыЗапроса["comment"];
	
	ОтправлятьСМС = ПараметрыЗапроса.Свойство("sendsms");
		
	//Возврат;
	НачатьТранзакцию();
	//создаем клиента при необходимости
	Если Не ЗначениеЗаполнено(Клиент) И ЗначениеЗаполнено(Имя) Тогда
		Клиент = "";
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Ошибка = "Не удалось создать клиента:" + Символы.ПС + ПолучитьВыведенныеСообщенияПользователю();
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//создаем авто при необходимости
	Если Не ЗначениеЗаполнено(Авто) И ЗначениеЗаполнено(АвтоТекст) И ЗначениеЗаполнено(Клиент) Тогда
		//Авто = ERP_STO_ОбщегоНазначения.СоздатьАвтомобильНаСервере(Клиент, АвтоТекст, "");//третий параметр - Госномер
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Ошибка = "Не удалось создать клиента:" + Символы.ПС + ПолучитьВыведенныеСообщенияПользователю();
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//тзНастройкиПользователя = ERP_STO_ОбщегоНазначения.ромПолучитьНастройкиПользователя(ДанныеПользователя.ПользовательСправочник);
	//Если не тзНастройкиПользователя = Неопределено И тзНастройкиПользователя.Количество() Тогда
	//	Настройки = тзНастройкиПользователя[0];
	//Иначе
	//	Настройки = Неопределено;
	//КонецЕсли;
	
	НовыйАкт = Документы.ERP_STO_АктУслугСТО.СоздатьДокумент();
	НовыйАкт.НачалоПериода = ДатаНачала;
	НовыйАкт.КонецПериода = ДатаНачала + (30 * 60);
	НовыйАкт.Дата = ТекущаяДата();
	//НоваяЗаписьКалендаря.ДатаОкончания = ДатаОкончания;
	//НоваяЗаписьКалендаря.Наименование = Строка(ОбъектСсылка);
	НовыйАкт.Описание = Комментарий;
	НовыйАкт.Клиент = Клиент;
	НовыйАкт.Автомобиль = Авто;
	НовыйАкт.Филиал = Филиал;
	НовыйАкт.ПостВыполненияРабот = Пост;
	НовыйАкт.Пользователь = ДанныеПользователя.ПользовательСправочник;
	НовыйАкт.Состояние = Перечисления.ERP_STO_СостоянияВыполненияЗаказов.Новый;
	//НовыйАкт.Подразделение = ERP_STO_ОбщегоНазначения.ПолучитьНастройкуПользователя("СтруктураПредприятияНастройкиСТО", Пользователи.ТекущийПользователь());
	//НовыйАкт.Подразделение = Филиал;
	НовыйАкт.ОтправлятьСМС = ОтправлятьСМС;  
	//Если Настройки <> Неопределено Тогда
	//	НовыйАкт.БанковскийСчетКассаПредоплаты = Настройки.КассаПредоплаты;
	//	НовыйАкт.БанковскийСчетКассаПостоплаты = Настройки.Касса;
	//КонецЕсли;
	
	Попытка
		НовыйАкт.Записать(РежимЗаписиДокумента.Проведение);
		Результат = "Акт услуг " + НовыйАкт.Номер + " успешно создан";
		
		ЗафиксироватьТранзакцию();
	Исключение
		Ошибка = "Не удалось создать акт услуг:" + 
		Символы.ПС + ПолучитьВыведенныеСообщенияПользователю() + 
		Символы.ПС + ОписаниеОшибки();
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

Процедура ПолучитьСписокВремениЗаписи(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	Дата = ПрочитатьДатуJSON(ПараметрыЗапроса.Получить("date"), ФорматДатыJSON.ISO);
	Филиал = ВыборкаДанныхСайтСервер.ПолучитьФилиалПоИдентификатору(ПараметрыЗапроса.Получить("filial"));
	Пост = ВыборкаДанныхСайтСервер.ПолучитьПостПоИдентификатору(ПараметрыЗапроса.Получить("post"));
	
	СписокВремени = Новый Массив;
	н = 9;
	Пока н < 21 Цикл
		СписокВремени.Добавить(Дата(Год(Дата), Месяц(Дата), День(Дата), н, 0, 0));
		СписокВремени.Добавить(Дата(Год(Дата), Месяц(Дата), День(Дата), н, 30, 0));
		
		н = н + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктУслуг.Ссылка КАК Ссылка,
	|	АктУслуг.НачалоПериода КАК ДатаНачала,
	|	АктУслуг.КонецПериода КАК ДатаОкончания
	|ИЗ
	|	Документ.ERP_STO_АктУслугСТО КАК АктУслуг
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(АктУслуг.НачалоПериода, ДЕНЬ) = &ДатаНачала
	|	И АктУслуг.Филиал = &Филиал
	|	И АктУслуг.ПостВыполненияРабот = &ПостВыполненияРабот
	|	И АктУслуг.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.УстановитьПараметр("ПостВыполненияРабот", Пост);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДатаНачала = Выборка.ДатаНачала;
		ДатаОкончания = Выборка.ДатаОкончания;
		
		Пока ДатаНачала < ДатаОкончания Цикл
			Если СписокВремени.Найти(ДатаНачала) <> Неопределено Тогда
				СписокВремени.Удалить(СписокВремени.Найти(ДатаНачала));
			КонецЕсли;
			
			ДатаНачала = ДатаНачала + (30 * 60);
		КонецЦикла;
	КонецЦикла;
	
	МассивДанных = Новый Массив;
	//МассивДанных.Добавить(Новый Структура("Время", "Виберите время"));
	Для Каждого ТекВремя Из СписокВремени Цикл
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Время", СтрШаблон("%1:%2", 
		Формат(Час(ТекВремя), "ЧЦ=2; ЧН=0; ЧВН="), 
		?(Минута(ТекВремя) = 0, "00", Формат(Минута(ТекВремя), "ЧЦ=2; ЧН=0; ЧВН="))
		));
		
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	
	
	Результат = Ответы.СериализоватьВJSON(МассивДанных, Ложь);
КонецПроцедуры

Процедура ПолучитьДанныеКалендаря(ДанныеПользователя, ПараметрыЗапроса, Результат, Ошибка) Экспорт 
	День = ПараметрыЗапроса["day"];
	Месяц = ПараметрыЗапроса["month"];
	Год = ПараметрыЗапроса["year"];
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ERP_STO_АктУслугСТО.Ссылка КАК Ссылка,
	|	ERP_STO_АктУслугСТО.ПостВыполненияРабот КАК Пост,
	|	ERP_STO_АктУслугСТО.Состояние КАК Состояние,
	|	ERP_STO_АктУслугСТО.НачалоПериода КАК НачалоПериода,
	|	ERP_STO_АктУслугСТО.КонецПериода КАК КонецПериода,
	|	ERP_STO_АктУслугСТО.Клиент КАК Клиент,
	|	ERP_STO_АктУслугСТО.Автомобиль КАК Автомобиль,
	|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	ВЫРАЗИТЬ(ERP_STO_АктУслугСТО.Описание КАК СТРОКА(500)) КАК Описание
	|ИЗ
	|	Документ.ERP_STO_АктУслугСТО КАК ERP_STO_АктУслугСТО
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|	ПО ERP_STO_АктУслугСТО.Клиент = ПартнерыКонтактнаяИнформация.Ссылка
	|		И (ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) = ПартнерыКонтактнаяИнформация.Тип)
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ERP_STO_АктУслугСТО.НачалоПериода, ДЕНЬ) = &Дата
	|	И ERP_STO_АктУслугСТО.Проведен
	|	И ERP_STO_АктУслугСТО.Филиал = &Филиал";
	
	Запрос.УстановитьПараметр("Дата", Дата(Год, Месяц, День));
	//Запрос.УстановитьПараметр("Филиал", ERP_STO_ОбщегоНазначения.ПолучитьНастройкуПользователя("Подразделение", ДанныеПользователя.ПользовательСправочник));
	РезультатЗапрос = Запрос.Выполнить();
	Выборка = РезультатЗапрос.Выбрать();
	Посты = Новый Соответствие;
	АктовНаПост = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Если Посты.Получить(Выборка.Пост) = Неопределено Тогда
			Посты.Вставить(Выборка.Пост, Посты.Количество());
		КонецЕсли;
		
		Если АктовНаПост.Получить(Выборка.Пост) = Неопределено Тогда
			АктовНаПост.Вставить(Выборка.Пост, 1);
		Иначе
			Количество = АктовНаПост.Получить(Выборка.Пост);
			АктовНаПост.Вставить(Выборка.Пост, Количество + 1);
		КонецЕсли;
	КонецЦикла;
	
	ОтмеченыхАктовНаПост = Новый Соответствие;
	МассивДанных = Новый Массив;
	
	н = 1;
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		СоставОписания = Новый Массив;
		СоставОписания.Добавить(Строка(Выборка.Клиент));
		СоставОписания.Добавить(Выборка.НомерТелефона);
		СоставОписания.Добавить(Строка(Выборка.Автомобиль));
		СоставОписания.Добавить(Выборка.Описание);
		Описание = СтрСоединить(СоставОписания,Символы.ПС);
		
		Если ОтмеченыхАктовНаПост.Получить(Выборка.Пост) = Неопределено Тогда
			ОтмеченыхАктовНаПост.Вставить(Выборка.Пост, 1);
		Иначе
			Количество = ОтмеченыхАктовНаПост.Получить(Выборка.Пост);
			ОтмеченыхАктовНаПост.Вставить(Выборка.Пост, Количество + 1);
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("id", н);
		СтруктураДанных.Вставить("category", Посты.Получить(Выборка.Пост));
		СтруктураДанных.Вставить("colstart", ПолучитьИндексВремениДляКалендаря(Выборка.НачалоПериода));
		СтруктураДанных.Вставить("colend", ПолучитьИндексВремениДляКалендаря(Выборка.КонецПериода));
		СтруктураДанных.Вставить("color", ЦветПоСтатусу(Выборка.Состояние));
		СтруктураДанных.Вставить("value", Описание);
		СтруктураДанных.Вставить("part", ОтмеченыхАктовНаПост.Получить(Выборка.Пост));
		СтруктураДанных.Вставить("parts", АктовНаПост.Получить(Выборка.Пост));
		
		
		МассивДанных.Добавить(СтруктураДанных);
		
		н = н + 1;
	КонецЦикла;
	Категории = Новый Массив;
	Для каждого КЗ Из Посты Цикл
		Категории.Добавить(Строка(КЗ.Ключ));
	КонецЦикла;
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("categories", Категории);
	СтруктураОтвета.Вставить("items", МассивДанных);
	
	Результат = Ответы.СериализоватьВJSON(СтруктураОтвета, Ложь);
КонецПроцедуры

Функция ПолучитьИндексВремениДляКалендаря(Знач Время)
	День = НачалоДня(Время) + (9 * 3600);
	Шаг = 30 * 60;
	н = 0;
	Пока День <= НачалоДня(Время) + (20 * 3600) Цикл
		Если День = Время Или (Время < День И Время > День - (Шаг)) Тогда
			Прервать;
		КонецЕсли;
		
		День = День + Шаг;
		н = н + 1;
	КонецЦикла;
	
	Возврат н;
КонецФункции

Функция ЦветПоСтатусу(Статус)
